<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - <%= settings && settings.site_name ? settings.site_name : 'ArchivArt' %> Admin</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Custom CSS -->
    <style>
        .sidebar-transition {
            transition: all 0.3s ease-in-out;
        }
        .sidebar-hidden {
            transform: translateX(-100%);
        }
        .sidebar-collapsed {
            width: 64px !important; /* Collapsed width */
        }
        .sidebar-collapsed .nav-link span {
            display: none !important;
        }
        .sidebar-collapsed .nav-link {
            justify-content: center !important;
            padding-left: 0.5rem !important;
            padding-right: 0.5rem !important;
        }
        .sidebar-collapsed .nav-link i {
            margin-right: 0 !important;
        }
        .sidebar-collapsed h1 {
            display: none !important;
        }
        .sidebar-collapsed .sidebar-logo-icon {
            display: block !important;
        }
        .sidebar-collapsed .flex.items-center.justify-center {
            justify-content: center !important;
        }
        .sidebar-collapsed .sidebar-text {
            display: none !important;
        }
        .sidebar-collapsed .ml-3 {
            margin-left: 0 !important;
        }
        .sidebar-logo img {
            object-fit: contain;
            border-radius: 4px;
        }
        .main-content-expanded {
            margin-left: 0;
        }
        .main-content-collapsed {
            margin-left: 64px !important; /* Adjust for collapsed sidebar */
        }
        .navbar-collapsed {
            left: 64px !important; /* Adjust navbar for collapsed sidebar */
        }
        .navbar-mobile {
            left: 0 !important;
        }
        .navbar-mobile-expanded {
            left: 0 !important;
        }
        #navbar {
            position: fixed !important;
            top: 0 !important;
            left: 256px !important; /* 64 * 4 = 256px (w-64) */
            right: 0 !important;
            z-index: 40 !important;
            transform: none !important;
            transition: left 0.3s ease-in-out !important;
        }
        .navbar-mobile {
            left: 0 !important;
        }
        .navbar-mobile-expanded {
            left: 0 !important;
        }
        @media (max-width: 1024px) {
            #navbar {
                left: 0 !important;
            }
        }
        
        
        /* Ensure logo container has proper padding and background */
        .sidebar-header {
            padding: 8px 20px;
            background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
            border-bottom: 2px solid #374151;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
        }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Sidebar -->
    <div id="sidebar" class="fixed inset-y-0 left-0 z-50 w-64 bg-gray-900 sidebar-transition">
        <!-- Sidebar Header -->
        <div class="flex items-center justify-center h-16 bg-gray-800 sidebar-header">
            <!-- Show site name from settings -->
            <h1 class="text-white text-xl font-bold">
                <i class="fas fa-magic mr-2"></i>
                <%= settings && settings.site_name ? settings.site_name : 'ArchivArt' %>
            </h1>
            <!-- Site name icon for collapsed mode -->
            <div class="sidebar-logo-icon hidden">
                <i class="fas fa-magic text-white text-2xl"></i>
            </div>
        </div>
        
        <!-- Sidebar Navigation -->
        <nav class="mt-5 px-2">
            <div class="space-y-1">
                <a href="/admin/dashboard" class="nav-link group flex items-center px-2 py-2 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-700 hover:text-white">
                    <i class="fas fa-tachometer-alt mr-3"></i>
                    <span>Dashboard</span>
                </a>
                
                <a href="/admin/users" class="nav-link group flex items-center px-2 py-2 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-700 hover:text-white">
                    <i class="fas fa-users mr-3"></i>
                    <span>Users</span>
                </a>
                <a href="/admin/media" class="nav-link group flex items-center px-2 py-2 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-700 hover:text-white">
                    <i class="fas fa-images mr-3"></i>
                    <span>Media</span>
                </a>
                
                <a href="/admin/media/upload" class="nav-link group flex items-center px-2 py-2 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-700 hover:text-white">
                    <i class="fas fa-upload mr-3"></i>
                    <span>Upload Media</span>
                </a>
                
                <a href="/admin/settings" class="nav-link group flex items-center px-2 py-2 text-sm font-medium rounded-md text-gray-300 hover:bg-gray-700 hover:text-white">
                    <i class="fas fa-cog mr-3"></i>
                    <span>Settings</span>
                </a>
            </div>
        </nav>
        
        <!-- Sidebar Footer -->
        <div class="absolute bottom-0 w-full p-4">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <img class="h-8 w-8 rounded-full" src="https://ui-avatars.com/api/?name=<%= user ? user.name : 'Admin' %>&background=random" alt="Admin">
                </div>
                <div class="ml-3 sidebar-text">
                    <p class="text-sm font-medium text-white"><%= user ? user.name : 'Admin' %></p>
                    <p class="text-xs text-gray-400"><%= user ? user.role : 'admin' %></p>
                </div>
            </div>
        </div>
    </div>

    <!-- Fixed Top Navigation -->
    <nav id="navbar" class="bg-white shadow-sm border-b border-gray-200">
        <div class="px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <button id="sidebar-toggle" class="text-gray-500 hover:text-gray-600 focus:outline-none focus:text-gray-600 lg:hidden">
                        <i class="fas fa-bars text-xl"></i>
                    </button>
                    <button id="desktop-sidebar-toggle" class="text-gray-500 hover:text-gray-600 focus:outline-none focus:text-gray-600 hidden lg:block">
                        <i class="fas fa-bars text-xl"></i>
                    </button>
                    <h2 class="ml-4 text-2xl font-semibold text-gray-900"><%= title %></h2>
                </div>
                
                <div class="flex items-center space-x-4">
                    <!-- Notifications -->
                    <button class="text-gray-500 hover:text-gray-600 focus:outline-none relative">
                        <i class="fas fa-bell text-xl"></i>
                        <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">3</span>
                    </button>
                    
                    <!-- User Menu -->
                    <div class="relative">
                        <button id="user-menu-button" class="flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <img class="h-8 w-8 rounded-full" src="https://ui-avatars.com/api/?name=<%= user ? user.name : 'Admin' %>&background=random" alt="Admin">
                            <span class="ml-2 text-gray-700"><%= user ? user.name : 'Admin' %></span>
                            <i class="fas fa-chevron-down ml-1 text-gray-400"></i>
                        </button>
                        
                        <!-- Dropdown Menu -->
                        <div id="user-menu" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50">
                            <a href="/admin/profile" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                <i class="fas fa-user mr-2"></i>Profile
                            </a>
                            <a href="/admin/settings" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                <i class="fas fa-cog mr-2"></i>Settings
                            </a>
                            <hr class="my-1">
                            <a href="/admin/logout" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                <i class="fas fa-sign-out-alt mr-2"></i>Logout
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div id="main-content" class="ml-64 sidebar-transition">
        <!-- Page Content -->
        <main class="pt-20 p-6">
            <!-- Flash Messages -->
            <% if (success_msg && success_msg.length > 0) { %>
                <div class="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
                    <i class="fas fa-check-circle mr-2"></i>
                    <%= success_msg %>
                </div>
            <% } %>
            
            <% if (error_msg && error_msg.length > 0) { %>
                <div class="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    <%= error_msg %>
                </div>
            <% } %>

            <!-- Page Content -->
            <%- body %>
        </main>
    </div>

    <!-- JavaScript -->
    <script>
        // Sidebar toggle for mobile
        document.getElementById('sidebar-toggle').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('main-content');
            const navbar = document.getElementById('navbar');
            
            sidebar.classList.toggle('sidebar-hidden');
            mainContent.classList.toggle('main-content-expanded');
            navbar.classList.toggle('navbar-mobile-expanded');
        });

        // Desktop sidebar toggle (collapse/expand)
        document.getElementById('desktop-sidebar-toggle').addEventListener('click', function() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('main-content');
            const navbar = document.getElementById('navbar');
            
            sidebar.classList.toggle('sidebar-collapsed');
            mainContent.classList.toggle('main-content-collapsed');
            navbar.classList.toggle('navbar-collapsed');
        });

        // User menu toggle
        document.getElementById('user-menu-button').addEventListener('click', function() {
            const userMenu = document.getElementById('user-menu');
            userMenu.classList.toggle('hidden');
        });

        // Close user menu when clicking outside
        document.addEventListener('click', function(event) {
            const userMenu = document.getElementById('user-menu');
            const userMenuButton = document.getElementById('user-menu-button');
            
            if (!userMenuButton.contains(event.target) && !userMenu.contains(event.target)) {
                userMenu.classList.add('hidden');
            }
        });

        // Active navigation link
        const currentPath = window.location.pathname;
        const navLinks = document.querySelectorAll('.nav-link');
        
        navLinks.forEach(link => {
            if (link.getAttribute('href') === currentPath) {
                link.classList.remove('text-gray-300', 'hover:bg-gray-700', 'hover:text-white');
                link.classList.add('bg-gray-700', 'text-white');
            }
        });

        // Handle flash messages with toaster notifications
        document.addEventListener('DOMContentLoaded', function() {
            const successMessages = document.querySelectorAll('.bg-green-100.border-green-400');
            const errorMessages = document.querySelectorAll('.bg-red-100.border-red-400');
            
            successMessages.forEach(function(message) {
                const messageText = message.textContent.trim();
                if (messageText) {
                    showSuccessToast(messageText);
                    message.remove();
                }
            });
            
            errorMessages.forEach(function(message) {
                const messageText = message.textContent.trim();
                if (messageText) {
                    showErrorToast(messageText);
                    message.remove();
                }
            });
        });
    </script>
    
    <!-- Include Toaster System -->
    <%- include('../partials/toaster') %>

    <!-- Include Modal System -->
    <%- include('../partials/modal') %>

    <!-- Include Global Loader -->
    <%- include('../partials/global-loader') %>

    <!-- Global Loader JavaScript -->
    <script src="/js/global-loader.js"></script>


    <!-- Media upload javascript - only loaded on media upload pages -->
    <% if (typeof title !== 'undefined' && title.includes('Upload Media')) { %>
        <script src="/js/media-upload.js"></script>
    <% } %>

    <!-- Settings javascript - only loaded on settings pages -->
    <% if (typeof title !== 'undefined' && title.includes('Settings')) { %>
        <script src="/js/settings.js"></script>
    <% } %>

    <!-- Media edit javascript - only loaded on media edit pages -->
    <% if (typeof title !== 'undefined' && title.includes('Edit Media')) { %>
        <script src="/js/media-edit.js"></script>
    <% } %>

    <!-- Table javascript - only loaded on media and users list pages -->
    <% if (typeof title !== 'undefined' && (title.includes('Media') || title.includes('Users'))) { %>
        <script src="/js/table.js"></script>
    <% } %>


    <!-- Users page specific JavaScript -->
    <% if (typeof title !== 'undefined' && title.includes('Users')) { %>
        <script>
        // Initialize table for users page
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof TableUtils !== 'undefined') {
                TableUtils.initTable({
                    sort: { column: 'created_at', direction: 'desc' },
                    page: 1,
                    search: '',
                    filters: {}
                });
            }
        });

        // User management functions
        function viewUser(userId) {
            console.log('viewUser called with userId:', userId);
            
            // Show loader immediately without delay
            if (typeof showLoader === 'function') {
                console.log('Showing loader for viewUser');
                showLoader({
                    title: 'Loading User Details...',
                    message: 'Fetching user information',
                    delay: 0 // No delay
                });
            }
            
            fetch(`/admin/users/${userId}`, {
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    // Hide loader immediately
                    if (typeof hideLoader === 'function') {
                        console.log('Hiding loader for viewUser success');
                        hideLoader();
                    }
                    
                    if (data.success) {
                        const user = data.user;
                        const userDetails = `
                            <div class="space-y-6">
                                <!-- User Profile Section -->
                                <div class="flex items-center space-x-6 p-6 bg-gradient-to-r from-purple-50 to-pink-50 rounded-2xl border border-purple-100">
                                    <div class="relative">
                                        <img class="h-20 w-20 rounded-full ring-4 ring-white shadow-lg" src="https://ui-avatars.com/api/?name=${user.name}&background=8B5CF6&color=ffffff&size=80" alt="${user.name}">
                                        <div class="absolute -bottom-1 -right-1 w-6 h-6 bg-green-400 border-2 border-white rounded-full"></div>
                                    </div>
                                    <div class="flex-1">
                                        <h4 class="text-2xl font-bold text-gray-900 mb-1">${user.name}</h4>
                                        <p class="text-gray-600 mb-2">${user.email}</p>
                                        <div class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getStatusText(user) === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                            <div class="w-2 h-2 rounded-full mr-2 ${getStatusText(user) === 'Active' ? 'bg-green-400' : 'bg-red-400'}"></div>
                                            ${getStatusText(user)}
                                        </div>
                                    </div>
                                </div>

                                <!-- User Information Cards -->
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <!-- Role Card -->
                                    <div class="bg-white border border-gray-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow duration-200">
                                        <div class="flex items-center mb-3">
                                            <div class="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3">
                                                <i class="fas fa-user-tag text-blue-600"></i>
                                            </div>
                                            <div>
                                                <h5 class="text-sm font-semibold text-gray-700 uppercase tracking-wide">Role</h5>
                                                <p class="text-lg font-bold text-gray-900 capitalize">${user.role}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Account Status Card -->
                                    <div class="bg-white border border-gray-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow duration-200">
                                        <div class="flex items-center mb-3">
                                            <div class="w-10 h-10 ${getStatusText(user) === 'Active' ? 'bg-green-100' : 'bg-red-100'} rounded-lg flex items-center justify-center mr-3">
                                                <i class="fas fa-user-check ${getStatusText(user) === 'Active' ? 'text-green-600' : 'text-red-600'}"></i>
                                            </div>
                                            <div>
                                                <h5 class="text-sm font-semibold text-gray-700 uppercase tracking-wide">Account Status</h5>
                                                <p class="text-lg font-bold ${getStatusText(user) === 'Active' ? 'text-green-600' : 'text-red-600'}">${getStatusText(user)}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Created Date Card -->
                                    <div class="bg-white border border-gray-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow duration-200">
                                        <div class="flex items-center mb-3">
                                            <div class="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mr-3">
                                                <i class="fas fa-calendar-plus text-purple-600"></i>
                                            </div>
                                            <div>
                                                <h5 class="text-sm font-semibold text-gray-700 uppercase tracking-wide">Created</h5>
                                                <p class="text-lg font-bold text-gray-900">${new Date(user.created_at).toLocaleDateString()}</p>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Last Updated Card -->
                                    <div class="bg-white border border-gray-200 rounded-xl p-4 shadow-sm hover:shadow-md transition-shadow duration-200">
                                        <div class="flex items-center mb-3">
                                            <div class="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center mr-3">
                                                <i class="fas fa-clock text-orange-600"></i>
                                            </div>
                                            <div>
                                                <h5 class="text-sm font-semibold text-gray-700 uppercase tracking-wide">Last Updated</h5>
                                                <p class="text-lg font-bold text-gray-900">${new Date(user.updated_at).toLocaleDateString()}</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Additional Info Section -->
                                <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-4 border border-gray-200">
                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center">
                                            <div class="w-8 h-8 bg-gray-200 rounded-lg flex items-center justify-center mr-3">
                                                <i class="fas fa-info-circle text-gray-600"></i>
                                            </div>
                                            <div>
                                                <h5 class="text-sm font-semibold text-gray-700">User ID</h5>
                                                <p class="text-sm text-gray-600">#${user.id}</p>
                                            </div>
                                        </div>
                                        <div class="text-right">
                                            <h5 class="text-sm font-semibold text-gray-700">Member Since</h5>
                                            <p class="text-sm text-gray-600">${Math.floor((new Date() - new Date(user.created_at)) / (1000 * 60 * 60 * 24))} days</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        document.getElementById('userDetails').innerHTML = userDetails;
                        // Show modal with animation
                        const modal = document.getElementById('viewUserModal');
                        const modalContainer = document.getElementById('viewUserModalContainer');
                        modal.classList.remove('hidden');
                        
                        // Trigger animation
                        setTimeout(() => {
                            if (modalContainer) {
                                modalContainer.classList.remove('scale-95', 'opacity-0');
                                modalContainer.classList.add('scale-100', 'opacity-100');
                            }
                        }, 10);
                    } else {
                        showErrorToast('Error loading user details');
                    }
                })
                .catch(error => {
                    // Hide loader
                    if (typeof hideLoader === 'function') {
                        console.log('Hiding loader for viewUser error');
                        hideLoader();
                    }
                    console.error('Error in viewUser:', error);
                    showErrorToast('Error loading user details: ' + error.message);
                });
        }

        function editUser(userId) {
            console.log('editUser called with userId:', userId);
            fetch(`/admin/users/${userId}`, {
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const user = data.user;
                        document.getElementById('editUserId').value = user.id;
                        document.getElementById('editUserName').value = user.name;
                        document.getElementById('editUserEmail').value = user.email;
                        document.getElementById('editUserRole').value = user.role;
                        
                        // Set status based on user state
                        if (user.is_blocked == 1 || user.is_blocked === true) {
                            document.getElementById('editUserStatus').value = 'blocked';
                        } else if (user.is_active == 1 || user.is_active === true) {
                            document.getElementById('editUserStatus').value = 'active';
                        } else {
                            document.getElementById('editUserStatus').value = 'inactive';
                        }
                        
                        // Show modal with animation
                        const modal = document.getElementById('editUserModal');
                        const modalContainer = document.getElementById('editUserModalContainer');
                        modal.classList.remove('hidden');
                        
                        // Trigger animation
                        setTimeout(() => {
                            if (modalContainer) {
                                modalContainer.classList.remove('scale-95', 'opacity-0');
                                modalContainer.classList.add('scale-100', 'opacity-100');
                            }
                        }, 10);
                    } else {
                        showErrorToast('Error loading user details');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showErrorToast('Error loading user details');
                });
        }

        function closeEditModal() {
            const modal = document.getElementById('editUserModal');
            const modalContainer = document.getElementById('editUserModalContainer');
            
            if (modalContainer) {
                // Trigger closing animation
                modalContainer.classList.remove('scale-100', 'opacity-100');
                modalContainer.classList.add('scale-95', 'opacity-0');
                
                // Hide modal after animation
                setTimeout(() => {
                    modal.classList.add('hidden');
                }, 300);
            } else {
                modal.classList.add('hidden');
            }
        }

        function closeViewModal() {
            const modal = document.getElementById('viewUserModal');
            const modalContainer = document.getElementById('viewUserModalContainer');
            
            if (modalContainer) {
                // Trigger closing animation
                modalContainer.classList.remove('scale-100', 'opacity-100');
                modalContainer.classList.add('scale-95', 'opacity-0');
                
                // Hide modal after animation
                setTimeout(() => {
                    modal.classList.add('hidden');
                }, 300);
            } else {
                modal.classList.add('hidden');
            }
        }

        // Generic modal close function
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            const modalContainer = document.getElementById(modalId + 'Container');
            
            if (modal) {
                if (modalContainer) {
                    // Trigger closing animation
                    modalContainer.classList.remove('scale-100', 'opacity-100');
                    modalContainer.classList.add('scale-95', 'opacity-0');
                    
                    // Hide modal after animation
                    setTimeout(() => {
                        modal.classList.add('hidden');
                    }, 300);
                } else {
                    modal.classList.add('hidden');
                }
            }
        }

        // Add click-outside-to-close functionality for all modals
        document.addEventListener('click', function(event) {
            // Check if clicked element is a modal backdrop
            if (event.target.classList.contains('fixed') && 
                event.target.classList.contains('inset-0') && 
                event.target.classList.contains('bg-gray-600')) {
                // Close the modal
                event.target.classList.add('hidden');
            }
        });

        function getStatusText(user) {
            if (user.is_blocked == 1 || user.is_blocked === true) return 'Blocked';
            if (user.is_active == 1 || user.is_active === true) return 'Active';
            return 'Inactive';
        }

        // Handle edit form submission
        document.getElementById('editUserForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const userId = formData.get('id');
            
            fetch(`/admin/users/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    name: formData.get('name'),
                    email: formData.get('email'),
                    role: formData.get('role'),
                    status: formData.get('status')
                })
            })
                .then(response => {
                    console.log('Edit response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Edit response data:', data);
                    if (data.success) {
                        showSuccessToast('User updated successfully');
                        closeEditModal();
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showErrorToast(`Error updating user: ${data.message || 'Unknown error'}`);
                    }
                })
                .catch(error => {
                    console.error('Edit error:', error);
                    showErrorToast(`Error updating user: ${error.message}`);
                });
        });

        function toggleUserStatus(userId, action) {
            console.log('toggleUserStatus called with userId:', userId, 'action:', action);
            const actionText = action === 'block' ? 'block' : 'unblock';
            showConfirmModal(
                `Are you sure you want to ${actionText} this user?`,
                'Confirm Action',
                function() {
                    performToggleUserStatus(userId, action, actionText);
                }
            );
        }

        function performToggleUserStatus(userId, action, actionText) {
                fetch(`/admin/users/${userId}/${action}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    console.log('Response headers:', response.headers);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        showSuccessToast(`User ${actionText}ed successfully`);
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showErrorToast(`Error ${actionText}ing user: ${data.message || 'Unknown error'}`);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showErrorToast(`Error ${actionText}ing user: ${error.message}`);
                });
        }

        function deleteUser(userId) {
            console.log('deleteUser called with userId:', userId);
            showConfirmModal(
                'Are you sure you want to delete this user? This action cannot be undone.',
                'Confirm Delete',
                function() {
                    performDeleteUser(userId);
                }
            );
        }

        function performDeleteUser(userId) {
                fetch(`/admin/users/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                })
                .then(response => {
                    console.log('Delete response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Delete response data:', data);
                    if (data.success) {
                        showSuccessToast('User deleted successfully');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showErrorToast(`Error deleting user: ${data.message || 'Unknown error'}`);
                    }
                })
                .catch(error => {
                    console.error('Delete error:', error);
                    showErrorToast(`Error deleting user: ${error.message}`);
                });
        }

        // Table initialization is now handled by individual page scripts
        </script>
    <% } %>

    <!-- Media page specific JavaScript -->
    <% if (typeof title !== 'undefined' && title.includes('Media')) { %>
        <script>
        // Initialize table for media page
        document.addEventListener('DOMContentLoaded', function() {
            if (typeof TableUtils !== 'undefined') {
                TableUtils.initTable({
                    sort: { column: 'created_at', direction: 'desc' },
                    page: 1,
                    search: '',
                    filters: {}
                });
            }
        });

        // Media management functions
        function viewMedia(mediaId) {
            console.log('viewMedia called with mediaId:', mediaId);
            
            // Show loader
            if (typeof showAjaxLoader === 'function') {
                showAjaxLoader({
                    title: 'Loading Media Details...',
                    message: 'Fetching media information'
                });
            }
            
            fetch(`/admin/media/${mediaId}`, {
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    // Hide loader
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    }
                    
                    if (data.success) {
                        const media = data.media;
                        const mediaDetails = `
                            <div class="space-y-4">
                                <div class="flex items-center space-x-4">
                                    ${media.media_type === 'image' ? 
                                        `<img class=\"h-16 w-16 rounded-lg object-cover\" src=\"${typeof mediaUrl === 'function' ? '${mediaUrl("' + media.file_path + '")}' : '/uploads/media/' + media.file_path}\" alt=\"${media.title}\">` :
                                        `<div class="h-16 w-16 rounded-lg bg-gray-200 flex items-center justify-center">
                                            <i class="fas fa-${media.media_type === 'video' ? 'video' : 'music'} text-gray-500"></i>
                                        </div>`
                                    }
                                    <div>
                                        <h4 class="text-lg font-medium text-gray-900">${media.title}</h4>
                                        <p class="text-sm text-gray-500">${media.media_type}</p>
                                    </div>
                                </div>
                                <div class="grid grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700">Description</label>
                                        <p class="mt-1 text-sm text-gray-900">${media.description || 'No description'}</p>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700">Scanning Image</label>
                                        <p class="mt-1 text-sm text-gray-900">${media.scanning_image}</p>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700">Status</label>
                                        <p class="mt-1 text-sm text-gray-900">${media.is_active ? 'Active' : 'Inactive'}</p>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700">File Size</label>
                                        <p class="mt-1 text-sm text-gray-900">${(media.file_size / (1024 * 1024)).toFixed(2)} MB</p>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700">Created</label>
                                        <p class="mt-1 text-sm text-gray-900">${new Date(media.created_at).toLocaleDateString()}</p>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700">Uploaded By</label>
                                        <p class="mt-1 text-sm text-gray-900">${media.uploaded_by_name || 'Unknown'}</p>
                                    </div>
                                </div>
                            </div>
                        `;
                        document.getElementById('mediaDetails').innerHTML = mediaDetails;
                        // Show modal with animation
                        const modal = document.getElementById('viewMediaModal');
                        const modalContainer = document.getElementById('viewMediaModalContainer');
                        modal.classList.remove('hidden');
                        
                        // Trigger animation
                        setTimeout(() => {
                            if (modalContainer) {
                                modalContainer.classList.remove('scale-95', 'opacity-0');
                                modalContainer.classList.add('scale-100', 'opacity-100');
                            }
                        }, 10);
                    } else {
                        showErrorToast('Error loading media details');
                    }
                })
                .catch(error => {
                    // Hide loader
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    }
                    console.error('Error in viewMedia:', error);
                    showErrorToast('Error loading media details: ' + error.message);
                });
        }

        function editMedia(mediaId) {
            console.log('editMedia called with mediaId:', mediaId);
            // Redirect to dedicated edit page
            window.location.href = `/admin/media/edit/${mediaId}`;
        }

        function toggleMediaStatus(mediaId) {
            console.log('toggleMediaStatus called with mediaId:', mediaId);
            
            if (typeof showConfirmModal === 'function') {
                showConfirmModal(
                    'Toggle Media Status',
                    'Are you sure you want to toggle the status of this media?',
                    () => performToggleMediaStatus(mediaId)
                );
            } else {
                if (confirm('Are you sure you want to toggle the status of this media?')) {
                    performToggleMediaStatus(mediaId);
                }
            }
        }

        function performToggleMediaStatus(mediaId) {
            // Show loader
            if (typeof showFormLoader === 'function') {
                showFormLoader({
                    title: 'Updating Status...',
                    message: 'Please wait while we update the media status'
                });
            }
            
            fetch(`/admin/media/${mediaId}/toggle`, {
                method: 'PATCH',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    // Hide loader
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    }
                    
                    if (data.success) {
                        showSuccessToast(data.message);
                        // Reload table data
                        if (typeof TableUtils !== 'undefined' && typeof TableUtils.loadTableData === 'function') {
                            TableUtils.loadTableData();
                        } else {
                            location.reload();
                        }
                    } else {
                        showErrorToast('Error updating media status: ' + data.message);
                    }
                })
                .catch(error => {
                    // Hide loader
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    }
                    console.error('Toggle media status error:', error);
                    showErrorToast('Error updating media status: ' + error.message);
                });
        }

        function deleteMedia(mediaId) {
            console.log('deleteMedia called with mediaId:', mediaId);
            
            if (typeof showConfirmModal === 'function') {
                showConfirmModal(
                    'Delete Media',
                    'Are you sure you want to delete this media? This action cannot be undone.',
                    () => performDeleteMedia(mediaId)
                );
            } else {
                if (confirm('Are you sure you want to delete this media? This action cannot be undone.')) {
                    performDeleteMedia(mediaId);
                }
            }
        }

        function performDeleteMedia(mediaId) {
            // Show loader
            if (typeof showFormLoader === 'function') {
                showFormLoader({
                    title: 'Deleting Media...',
                    message: 'Please wait while we delete the media'
                });
            }
            
            fetch(`/admin/media/${mediaId}`, {
                method: 'DELETE',
                headers: {
                    'Accept': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    // Hide loader
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    }
                    
                    if (data.success) {
                        showSuccessToast('Media deleted successfully');
                        // Reload table data
                        if (typeof TableUtils !== 'undefined' && typeof TableUtils.loadTableData === 'function') {
                            TableUtils.loadTableData();
                        } else {
                            location.reload();
                        }
                    } else {
                        showErrorToast('Error deleting media: ' + data.message);
                    }
                })
                .catch(error => {
                    // Hide loader
                    if (typeof hideLoader === 'function') {
                        hideLoader();
                    }
                    console.error('Delete media error:', error);
                    showErrorToast('Error deleting media: ' + error.message);
                });
        }

        // Edit form submission handler removed - now using dedicated edit page

        // Initialize table for AJAX operations (search, sort, pagination)
        document.addEventListener('DOMContentLoaded', function() {
            // Only initialize AJAX functionality if there are search/filter controls
            const searchForm = document.getElementById('searchForm');
            const hasFilters = document.querySelector('#statusFilter, #roleFilter, #media_type, #is_active');
            
            if (typeof TableUtils !== 'undefined' && (searchForm || hasFilters)) {
                TableUtils.initTable({
                    sort: { column: 'created_at', direction: 'desc' },
                    page: 1,
                    search: '',
                    filters: {}
                });
            }
        });
        </script>
    <% } %>
</body>
</html>
