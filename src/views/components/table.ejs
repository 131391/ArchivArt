<!-- Common Table Component with Pagination and Sorting -->
<style>
    .table-cell-wrap {
        word-break: break-word !important;
        overflow-wrap: break-word !important;
        hyphens: auto !important;
        white-space: normal !important;
    }
    .table-cell-nowrap {
        white-space: nowrap !important;
        overflow: hidden !important;
        text-overflow: ellipsis !important;
    }
</style>
<div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
        <h1 class="text-2xl font-bold text-gray-900"><%= title %></h1>
        <div class="flex space-x-4">
            <!-- Search -->
            <% if (showSearch) { %>
            <form method="GET" class="flex" id="searchForm">
                <input type="text" name="search" placeholder="<%= searchPlaceholder || 'Search...' %>" 
                       value="<%= search %>"
                       class="px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                <button type="submit" class="px-4 py-2 bg-indigo-600 text-white rounded-r-md hover:bg-indigo-700">
                    <i class="fas fa-search"></i>
                </button>
            </form>
            <% } %>
            
            <!-- Filters -->
            <% if (typeof filters !== 'undefined' && filters && Object.keys(filters).length > 0) { %>
                <% if (filters.statusFilter !== undefined) { %>
                <select id="statusFilter" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="">All Status</option>
                    <option value="active" <%= filters.statusFilter === 'active' ? 'selected' : '' %>>Active</option>
                    <option value="blocked" <%= filters.statusFilter === 'blocked' ? 'selected' : '' %>>Blocked</option>
                    <option value="inactive" <%= filters.statusFilter === 'inactive' ? 'selected' : '' %>>Inactive</option>
                </select>
                <% } %>
                <% if (filters.roleFilter !== undefined) { %>
                <select id="roleFilter" class="px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="">All Roles</option>
                    <option value="admin" <%= filters.roleFilter === 'admin' ? 'selected' : '' %>>Admin</option>
                    <option value="user" <%= filters.roleFilter === 'user' ? 'selected' : '' %>>User</option>
                </select>
                <% } %>
            <% } %>
        </div>
    </div>

    <!-- Table -->
    <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <div class="px-4 py-5 sm:p-6">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200" id="dataTable">
                    <thead class="bg-gray-50">
                        <tr>
                            <% columns.forEach(column => { %>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" 
                                <% if (column.sortable) { %>onclick="sortTable('<%= column.key %>')"<% } %>>
                                <%= column.label %>
                                <% if (column.sortable) { %>
                                <i class="fas fa-sort ml-1"></i>
                                <% } %>
                            </th>
                            <% }); %>
                            <% if (actions && actions.length > 0) { %>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            <% } %>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <% if (data && data.length > 0) { %>
                            <% data.forEach((item, index) => { %>
                            <tr class="hover:bg-gray-50">
                                <% columns.forEach(column => { %>
                                <td class="px-6 py-4 <%= column.wrap !== false ? 'table-cell-wrap' : 'table-cell-nowrap' %> <%= column.maxWidth ? 'max-w-' + column.maxWidth : '' %>">
                                    <% if (column.type === 'avatar') { %>
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-10 w-10">
                                                <img class="h-10 w-10 rounded-full" src="<%= column.avatarUrl ? column.avatarUrl(item) : 'https://ui-avatars.com/api/?name=' + encodeURIComponent(item[column.key]) + '&background=random' %>" alt="<%= item[column.key] %>">
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900"><%= item[column.key] %></div>
                                                <% if (column.subtitle) { %>
                                                <div class="text-sm text-gray-500"><%= column.subtitle(item) %></div>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% } else if (column.type === 'badge') { %>
                                        <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full <%= column.badgeClass ? column.badgeClass(item) : 'bg-green-100 text-green-800' %>">
                                            <%= column.formatter ? column.formatter(item) : item[column.key] %>
                                        </span>
                                    <% } else if (column.type === 'date') { %>
                                        <%= new Date(item[column.key]).toLocaleDateString() %>
                                    <% } else if (column.type === 'custom') { %>
                                        <%- column.formatter(item) %>
                                    <% } else { %>
                                        <% if (column.key === 'scanning_image' && typeof mediaUrl === 'function') { %>
                                            <%= item[column.key] %>
                                        <% } else { %>
                                            <%= item[column.key] %>
                                        <% } %>
                                    <% } %>
                                </td>
                                <% }); %>
                                
                                <% if (actions && actions.length > 0) { %>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                    <div class="flex space-x-2">
                                        <% actions.forEach(action => { %>
                                            <% if (!action.condition || action.condition(item)) { %>
                                            <button onclick="<%= action.onclick(item) %>" 
                                                    class="<%= action.class %>" 
                                                    title="<%= typeof action.title === 'function' ? action.title(item) : action.title %>">
                                                <i class="<%= typeof action.icon === 'function' ? action.icon(item) : action.icon %>"></i>
                                            </button>
                                            <% } %>
                                        <% }); %>
                                    </div>
                                </td>
                                <% } %>
                            </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="100%" class="px-6 py-4 text-center">
                                    <div class="flex flex-col items-center justify-center py-12">
                                        <i class="<%= emptyIcon || 'fas fa-inbox' %> text-4xl text-gray-400 mb-4"></i>
                                        <h3 class="text-lg font-medium text-gray-900 mb-2"><%= emptyTitle || 'No Data Found' %></h3>
                                        <p class="text-gray-500 text-center max-w-sm">
                                            <%= search && search.length > 0 ? (emptySearchMessage || 'No items match your search criteria.') : (emptyMessage || 'No data available at the moment.') %>
                                        </p>
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>

                <!-- Pagination -->
                <% if (pagination && pagination.totalPages > 1) { %>
                <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4">
                    <div class="flex-1 flex justify-between sm:hidden">
                        <% if (pagination.hasPrev) { %>
                        <button onclick="goToPage(<%= pagination.currentPage - 1 %>)" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Previous
                        </button>
                        <% } %>
                        <% if (pagination.hasNext) { %>
                        <button onclick="goToPage(<%= pagination.currentPage + 1 %>)" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                            Next
                        </button>
                        <% } %>
                    </div>
                    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                        <div>
                            <p class="text-sm text-gray-700">
                                Showing
                                <span class="font-medium"><%= pagination.startItem %></span>
                                to
                                <span class="font-medium"><%= pagination.endItem %></span>
                                of
                                <span class="font-medium"><%= pagination.totalItems %></span>
                                results
                            </p>
                        </div>
                        <div>
                            <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                <% if (pagination.hasPrev) { %>
                                <button onclick="goToPage(<%= pagination.currentPage - 1 %>)" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                    <span class="sr-only">Previous</span>
                                    <i class="fas fa-chevron-left"></i>
                                </button>
                                <% } %>
                                
                                <% for (let i = pagination.startPage; i <= pagination.endPage; i++) { %>
                                    <% if (i === pagination.currentPage) { %>
                                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-indigo-50 text-sm font-medium text-indigo-600">
                                        <%= i %>
                                    </span>
                                    <% } else { %>
                                    <button onclick="goToPage(<%= i %>)" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                                        <%= i %>
                                    </button>
                                    <% } %>
                                <% } %>
                                
                                <% if (pagination.hasNext) { %>
                                <button onclick="goToPage(<%= pagination.currentPage + 1 %>)" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                    <span class="sr-only">Next</span>
                                    <i class="fas fa-chevron-right"></i>
                                </button>
                                <% } %>
                            </nav>
                        </div>
                    </div>
                </div>
                <% } %>
        </div>
    </div>
</div>

<script>
// Table functionality
let currentSort = { column: 'created_at', direction: 'desc' };
let currentPage = 1;
let currentSearch = '';
let currentFilters = {};
let isLoading = false;

// Initialize table on page load
document.addEventListener('DOMContentLoaded', function() {
    // Get current values from URL or defaults
    const urlParams = new URLSearchParams(window.location.search);
    currentPage = parseInt(urlParams.get('page')) || 1;
    currentSearch = urlParams.get('search') || '';
    currentSort.column = urlParams.get('sort') || 'created_at';
    currentSort.direction = urlParams.get('order') || 'desc';
    
    // Set up event listeners
    setupEventListeners();
});

// Set up event listeners
function setupEventListeners() {
    // Search form
    const searchForm = document.getElementById('searchForm');
    if (searchForm) {
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const searchInput = this.querySelector('input[name="search"]');
            currentSearch = searchInput.value;
            currentPage = 1;
            loadTableData();
        });
    }

    // Filter dropdowns
    const filters = document.querySelectorAll('select[id$="Filter"]');
    filters.forEach(filter => {
        filter.addEventListener('change', function() {
            const filterName = this.id.replace('Filter', '');
            currentFilters[filterName] = this.value;
            currentPage = 1;
            loadTableData();
        });
    });
}

// Sorting functionality
function sortTable(column) {
    if (currentSort.column === column) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort.column = column;
        currentSort.direction = 'asc';
    }
    currentPage = 1;
    loadTableData();
}

// Pagination functionality
function goToPage(page) {
    currentPage = page;
    loadTableData();
}

// Load table data via AJAX
function loadTableData() {
    if (isLoading) return;
    
    isLoading = true;
    
    // Build query parameters
    const params = new URLSearchParams({
        page: currentPage,
        search: currentSearch,
        sort: currentSort.column,
        order: currentSort.direction
    });
    
    // Add filters
    Object.keys(currentFilters).forEach(key => {
        if (currentFilters[key]) {
            params.append(key, currentFilters[key]);
        }
    });
    
    // Show loading state
    if (typeof showLoader === 'function') {
        showLoader({
            title: 'Loading...',
            message: 'Fetching data from server',
            delay: 0
        });
    }
    
    // Make AJAX request
    fetch(`/admin/media/data?${params.toString()}`, {
        method: 'GET',
        credentials: 'same-origin', // Include cookies/session
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                updateTableContent(data);
                updatePagination(data.pagination);
                updateURL();
            } else {
                if (typeof showNotification === 'function') {
                    showNotification('Error loading data: ' + data.message, 'error');
                } else {
                    alert('Error loading data: ' + data.message);
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            if (typeof showNotification === 'function') {
                showNotification('Error loading data', 'error');
            } else {
                alert('Error loading data');
            }
        })
        .finally(() => {
            if (typeof hideLoader === 'function') {
                hideLoader();
            }
            isLoading = false;
        });
}

// Update table content
function updateTableContent(data) {
    const tbody = document.querySelector('#dataTable tbody');
    if (!tbody) return;
    
    if (data.tableRows && data.tableRows.trim() !== '') {
        tbody.innerHTML = data.tableRows;
    } else {
        // Show empty state
        const currentPath = window.location.pathname;
        const isMediaPage = currentPath.includes('/media');
        const emptyIcon = isMediaPage ? 'fas fa-images' : 'fas fa-users';
        const emptyTitle = isMediaPage ? 'No Media Found' : 'No Users Found';
        const emptyMessage = isMediaPage ?
            'No media files have been uploaded yet.' :
            'No users match your current filter criteria.';
        
        tbody.innerHTML = `
            <tr>
                <td colspan="100%" class="px-6 py-4 text-center">
                    <div class="flex flex-col items-center justify-center py-12">
                        <i class="${emptyIcon} text-4xl text-gray-400 mb-4"></i>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">${emptyTitle}</h3>
                        <p class="text-gray-500 text-center max-w-sm">
                            ${currentSearch && currentSearch.length > 0 ? 
                                'No items match your search criteria.' : 
                                emptyMessage}
                        </p>
                    </div>
                </td>
            </tr>
        `;
    }
}

// Update pagination
function updatePagination(pagination) {
    // Update pagination controls if needed
    // For now, we'll just update the URL
    updateURL();
}

// Update URL without page reload
function updateURL() {
    const params = new URLSearchParams({
        page: currentPage,
        search: currentSearch,
        sort: currentSort.column,
        order: currentSort.direction
    });
    
    Object.keys(currentFilters).forEach(key => {
        if (currentFilters[key]) {
            params.append(key, currentFilters[key]);
        }
    });
    
    const newURL = `${window.location.pathname}?${params.toString()}`;
    window.history.pushState({}, '', newURL);
}

// Media management functions
function editMedia(mediaId) {
    window.location.href = `/admin/media/edit/${mediaId}`;
}

function toggleMediaStatus(mediaId) {
    if (confirm('Are you sure you want to toggle the status of this media?')) {
        fetch(`/admin/media/${mediaId}/toggle`, {
            method: 'PATCH',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Media status updated successfully', 'success');
                loadTableData(); // Reload table
            } else {
                showNotification('Error updating media status: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Error updating media status', 'error');
        });
    }
}

function deleteMedia(mediaId) {
    if (confirm('Are you sure you want to delete this media? This action cannot be undone.')) {
        fetch(`/admin/media/${mediaId}`, {
            method: 'DELETE',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Media deleted successfully', 'success');
                loadTableData(); // Reload table
            } else {
                showNotification('Error deleting media: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Error deleting media', 'error');
        });
    }
}
</script>
