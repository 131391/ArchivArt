<!-- Enhanced Table Component with Modern Design -->
<style>
    .table-cell-wrap {
        word-break: break-word !important;
        overflow-wrap: break-word !important;
        hyphens: auto !important;
        white-space: normal !important;
    }
    .table-cell-nowrap {
        white-space: nowrap !important;
        overflow: hidden !important;
        text-overflow: ellipsis !important;
    }
    
    /* Enhanced table animations */
    .table-row-enter {
        opacity: 0;
        transform: translateY(10px);
    }
    .table-row-enter-active {
        opacity: 1;
        transform: translateY(0);
        transition: opacity 0.3s ease, transform 0.3s ease;
    }
    
    /* Custom scrollbar */
    .custom-scrollbar::-webkit-scrollbar {
        height: 8px;
    }
    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 4px;
    }
    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 4px;
    }
    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }
</style>

<div class="space-y-8">
    <!-- Enhanced Header Section -->
    <div class="bg-gradient-to-r from-slate-50 to-gray-50 rounded-2xl p-6 border border-gray-200 shadow-sm">
        <div class="flex flex-col xl:flex-row xl:justify-between xl:items-center space-y-4 xl:space-y-0">
            <!-- Title Section -->
            <div class="flex items-center space-x-4">
                <div class="w-12 h-12 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                    <i class="fas fa-table text-white text-xl"></i>
                </div>
                <div>
                    <h1 class="text-3xl font-bold text-gray-900"><%= title %></h1>
                    <p class="text-gray-600 mt-1">Manage and view your data efficiently</p>
                </div>
            </div>
            
            <!-- Search, Filters and Action Buttons -->
            <div class="flex flex-col lg:flex-row space-y-4 lg:space-y-0 lg:space-x-4 lg:items-center">
                <!-- Search and Filters -->
                <div class="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3">
                    <!-- Enhanced Search -->
                    <% if (showSearch) { %>
                    <div class="relative">
                        <div class="relative">
                            <input type="text" 
                                   id="searchInput"
                                   placeholder="<%= searchPlaceholder || 'Search...' %>" 
                                   value="<%= search %>"
                                   class="w-full sm:w-64 px-4 py-3 pl-12 pr-12 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm hover:shadow-md">
                            <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <i class="fas fa-search text-gray-400"></i>
                            </div>
                            <div id="searchLoading" class="absolute inset-y-0 right-0 pr-4 flex items-center hidden">
                                <i class="fas fa-spinner fa-spin text-indigo-500"></i>
                            </div>
                        </div>
                    </div>
                    <% } %>
                    
                    <!-- Enhanced Filters -->
                    <% if (typeof filters !== 'undefined' && filters && Object.keys(filters).length > 0) { %>
                        <% if (filters.statusFilter !== undefined) { %>
                        <div class="relative">
                            <select id="statusFilter" class="appearance-none px-4 py-3 pr-10 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm hover:shadow-md cursor-pointer">
                                <option value="">All Status</option>
                                <option value="active" <%= filters.statusFilter === 'active' ? 'selected' : '' %>>Active</option>
                                <option value="blocked" <%= filters.statusFilter === 'blocked' ? 'selected' : '' %>>Blocked</option>
                                <option value="inactive" <%= filters.statusFilter === 'inactive' ? 'selected' : '' %>>Inactive</option>
                            </select>
                            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                <i class="fas fa-chevron-down text-gray-400"></i>
                            </div>
                        </div>
                        <% } %>
                        <% if (filters.roleFilter !== undefined) { %>
                        <div class="relative">
                            <select id="roleFilter" class="appearance-none px-4 py-3 pr-10 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 bg-white shadow-sm hover:shadow-md cursor-pointer">
                                <option value="">All Roles</option>
                                <option value="admin" <%= filters.roleFilter === 'admin' ? 'selected' : '' %>>Admin</option>
                                <option value="user" <%= filters.roleFilter === 'user' ? 'selected' : '' %>>User</option>
                            </select>
                            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                <i class="fas fa-chevron-down text-gray-400"></i>
                            </div>
                        </div>
                        <% } %>
                    <% } %>
                </div>
                
                <!-- Action Buttons -->
                <% if (typeof headerButtons !== 'undefined' && headerButtons && headerButtons.length > 0) { %>
                    <% headerButtons.forEach(button => { %>
                        <a href="<%= button.href %>" 
                           class="<%= button.class || 'inline-flex items-center px-6 py-3 border border-transparent text-sm font-semibold rounded-xl text-white bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl' %>">
                            <% if (button.icon) { %>
                                <i class="<%= button.icon %> mr-2"></i>
                            <% } %>
                            <%= button.text %>
                        </a>
                    <% }); %>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Enhanced Table -->
    <div class="bg-white rounded-2xl shadow-xl border border-gray-200 overflow-hidden">
        <div class="overflow-x-auto custom-scrollbar">
            <table class="min-w-full" id="dataTable">
                <thead class="bg-gradient-to-r from-gray-50 to-gray-100">
                    <tr>
                        <% columns.forEach(column => { %>
                        <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-200 transition-colors duration-200 border-b border-gray-200" 
                            <% if (column.sortable) { %>onclick="sortTable('<%= column.key %>')"<% } %>>
                            <div class="flex items-center space-x-2">
                                <span><%= column.label %></span>
                                <% if (column.sortable) { %>
                                <div class="flex flex-col">
                                    <i class="fas fa-sort-up text-gray-400 text-xs"></i>
                                    <i class="fas fa-sort-down text-gray-400 text-xs -mt-1"></i>
                                </div>
                                <% } %>
                            </div>
                        </th>
                        <% }); %>
                        <% if (actions && actions.length > 0) { %>
                        <th class="px-6 py-4 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider border-b border-gray-200">
                            <div class="flex items-center space-x-2">
                                <i class="fas fa-cog text-gray-500"></i>
                                <span>Actions</span>
                            </div>
                        </th>
                        <% } %>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-100">
                        <% if (data && data.length > 0) { %>
                            <% data.forEach((item, index) => { %>
                            <tr class="hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100 transition-all duration-200 border-b border-gray-100">
                                <% columns.forEach(column => { %>
                                <td class="px-6 py-5 <%= column.wrap !== false ? 'table-cell-wrap' : 'table-cell-nowrap' %> <%= column.maxWidth ? 'max-w-' + column.maxWidth : '' %>">
                                    <% if (column.type === 'avatar') { %>
                                        <div class="flex items-center space-x-4">
                                            <div class="flex-shrink-0 relative">
                                                <img class="h-12 w-12 rounded-full ring-2 ring-white shadow-md" src="<%= column.avatarUrl ? column.avatarUrl(item) : 'https://ui-avatars.com/api/?name=' + encodeURIComponent(item[column.key]) + '&background=8B5CF6&color=ffffff&size=48' %>" alt="<%= item[column.key] %>">
                                                <div class="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 border-2 border-white rounded-full"></div>
                                            </div>
                                            <div class="min-w-0 flex-1">
                                                <div class="text-sm font-semibold text-gray-900 truncate"><%= item[column.key] %></div>
                                                <% if (column.subtitle) { %>
                                                <div class="text-sm text-gray-500 truncate"><%= column.subtitle(item) %></div>
                                                <% } %>
                                            </div>
                                        </div>
                                    <% } else if (column.type === 'badge') { %>
                                        <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold <%= column.badgeClass ? column.badgeClass(item) : 'bg-green-100 text-green-800' %>">
                                            <div class="w-2 h-2 rounded-full mr-2 bg-current opacity-75"></div>
                                            <%= column.formatter ? column.formatter(item) : item[column.key] %>
                                        </span>
                                    <% } else if (column.type === 'date') { %>
                                        <div class="flex items-center space-x-2">
                                            <i class="fas fa-calendar text-gray-400 text-xs"></i>
                                            <span class="text-sm text-gray-900"><%= new Date(item[column.key]).toLocaleDateString() %></span>
                                        </div>
                                    <% } else if (column.type === 'custom') { %>
                                        <%- column.formatter(item) %>
                                    <% } else { %>
                                        <div class="text-sm text-gray-900">
                                            <% if (column.key === 'scanning_image' && typeof mediaUrl === 'function') { %>
                                                <%= item[column.key] %>
                                            <% } else { %>
                                                <%= item[column.key] %>
                                            <% } %>
                                        </div>
                                    <% } %>
                                </td>
                                <% }); %>
                                
                                <% if (actions && actions.length > 0) { %>
                                <td class="px-6 py-5 whitespace-nowrap">
                                    <div class="flex items-center space-x-2">
                                        <% actions.forEach(action => { %>
                                            <% if (!action.condition || action.condition(item)) { %>
                                            <button onclick="<%= action.onclick(item) %>" 
                                                    class="<%= action.class || 'inline-flex items-center justify-center w-8 h-8 rounded-lg text-sm font-medium transition-all duration-200 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-offset-2' %>" 
                                                    title="<%= typeof action.title === 'function' ? action.title(item) : action.title %>">
                                                <i class="<%= typeof action.icon === 'function' ? action.icon(item) : action.icon %>"></i>
                                            </button>
                                            <% } %>
                                        <% }); %>
                                    </div>
                                </td>
                                <% } %>
                            </tr>
                            <% }); %>
                        <% } else { %>
                            <tr>
                                <td colspan="100%" class="px-6 py-12 text-center">
                                    <div class="flex flex-col items-center justify-center py-16">
                                        <div class="w-20 h-20 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full flex items-center justify-center mb-6">
                                            <i class="<%= emptyIcon || 'fas fa-inbox' %> text-3xl text-gray-400"></i>
                                        </div>
                                        <h3 class="text-xl font-semibold text-gray-900 mb-3"><%= emptyTitle || 'No Data Found' %></h3>
                                        <p class="text-gray-500 text-center max-w-md leading-relaxed">
                                            <%= search && search.length > 0 ? (emptySearchMessage || 'No items match your search criteria.') : (emptyMessage || 'No data available at the moment.') %>
                                        </p>
                                        <% if (search && search.length > 0) { %>
                                        <button onclick="document.getElementById('searchInput').value = ''; document.getElementById('searchInput').dispatchEvent(new Event('input'));" 
                                                class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-indigo-600 bg-indigo-50 hover:bg-indigo-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200">
                                            <i class="fas fa-times mr-2"></i>
                                            Clear Search
                                        </button>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Enhanced Pagination -->
        <% if (pagination && pagination.totalPages > 1) { %>
        <div class="bg-gradient-to-r from-gray-50 to-gray-100 px-6 py-4 border-t border-gray-200">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
                <!-- Results Info -->
                <div class="flex items-center space-x-2">
                    <i class="fas fa-info-circle text-gray-400"></i>
                    <p class="text-sm text-gray-700">
                        Showing
                        <span class="font-semibold text-gray-900"><%= pagination.startItem %></span>
                        to
                        <span class="font-semibold text-gray-900"><%= pagination.endItem %></span>
                        of
                        <span class="font-semibold text-gray-900"><%= pagination.totalItems %></span>
                        results
                    </p>
                </div>
                
                <!-- Pagination Controls -->
                <div class="flex items-center space-x-2">
                    <!-- Mobile Pagination -->
                    <div class="flex sm:hidden space-x-2">
                        <% if (pagination.hasPrev) { %>
                        <button onclick="goToPage(<%= pagination.currentPage - 1 %>)" class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200">
                            <i class="fas fa-chevron-left mr-1"></i>
                            Previous
                        </button>
                        <% } %>
                        <% if (pagination.hasNext) { %>
                        <button onclick="goToPage(<%= pagination.currentPage + 1 %>)" class="inline-flex items-center px-3 py-2 border border-gray-300 text-sm font-medium rounded-lg text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200">
                            Next
                            <i class="fas fa-chevron-right ml-1"></i>
                        </button>
                        <% } %>
                    </div>
                    
                    <!-- Desktop Pagination -->
                    <div class="hidden sm:flex items-center space-x-1">
                        <% if (pagination.hasPrev) { %>
                        <button onclick="goToPage(<%= pagination.currentPage - 1 %>)" class="inline-flex items-center justify-center w-10 h-10 border border-gray-300 rounded-lg bg-white text-gray-500 hover:bg-gray-50 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200">
                            <i class="fas fa-chevron-left text-sm"></i>
                        </button>
                        <% } %>
                        
                        <% for (let i = pagination.startPage; i <= pagination.endPage; i++) { %>
                            <% if (i === pagination.currentPage) { %>
                            <span class="inline-flex items-center justify-center w-10 h-10 border border-indigo-500 bg-indigo-500 text-white text-sm font-semibold rounded-lg">
                                <%= i %>
                            </span>
                            <% } else { %>
                            <button onclick="goToPage(<%= i %>)" class="inline-flex items-center justify-center w-10 h-10 border border-gray-300 bg-white text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200 rounded-lg">
                                <%= i %>
                            </button>
                            <% } %>
                        <% } %>
                        
                        <% if (pagination.hasNext) { %>
                        <button onclick="goToPage(<%= pagination.currentPage + 1 %>)" class="inline-flex items-center justify-center w-10 h-10 border border-gray-300 rounded-lg bg-white text-gray-500 hover:bg-gray-50 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-colors duration-200">
                            <i class="fas fa-chevron-right text-sm"></i>
                        </button>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
        <% } %>
    </div>
</div>

<!-- Table JavaScript is now handled by /js/table.js -->
<script>
// Table functionality (DEPRECATED - use /js/table.js instead)
let currentSort = { column: 'created_at', direction: 'desc' };
let currentPage = 1;
let currentSearch = '';
let currentFilters = {};
let isLoading = false;

// Initialize table on page load
document.addEventListener('DOMContentLoaded', function() {
    // Get current values from URL or defaults
    const urlParams = new URLSearchParams(window.location.search);
    currentPage = parseInt(urlParams.get('page')) || 1;
    currentSearch = urlParams.get('search') || '';
    currentSort.column = urlParams.get('sort') || 'created_at';
    currentSort.direction = urlParams.get('order') || 'desc';
    
    // Set up event listeners
    setupEventListeners();
});

// Debounce function
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Set up event listeners
function setupEventListeners() {
    console.log('Setting up event listeners...');
    
    // Search input with debouncing
    const searchInput = document.getElementById('searchInput');
    console.log('Search input element:', searchInput);
    
    if (searchInput) {
        console.log('Search input found, setting up event listeners');
        
        // Debounced search function
        const debouncedSearch = debounce(function(value) {
            console.log('Debounced search triggered with value:', value);
            currentSearch = value;
            currentPage = 1;
            loadTableData();
        }, 500); // 500ms delay
        
        // Input event listener
        searchInput.addEventListener('input', function(e) {
            const value = e.target.value.trim();
            console.log('Search input changed:', value);
            
            // Test alert to see if event is firing
            if (value.length > 0) {
                console.log('Search input has value, proceeding with search');
            }
            
            // Show loading indicator
            const loadingIndicator = document.getElementById('searchLoading');
            if (loadingIndicator) {
                loadingIndicator.classList.remove('hidden');
            }
            
            // Immediate search for testing (remove debouncing temporarily)
            currentSearch = value;
            currentPage = 1;
            loadTableData();
            
            // Debounced search (commented out for testing)
            // debouncedSearch(value);
        });
        
        // Clear search on escape
        searchInput.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                console.log('Escape key pressed, clearing search');
                this.value = '';
                currentSearch = '';
                currentPage = 1;
                loadTableData();
            }
        });
        
        console.log('Search event listeners set up successfully');
    } else {
        console.error('Search input element not found!');
    }

    // Filter dropdowns
    const filters = document.querySelectorAll('select[id$="Filter"]');
    filters.forEach(filter => {
        filter.addEventListener('change', function() {
            const filterName = this.id.replace('Filter', '');
            currentFilters[filterName] = this.value;
            currentPage = 1;
            loadTableData();
        });
    });
}

// Sorting functionality
function sortTable(column) {
    if (currentSort.column === column) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort.column = column;
        currentSort.direction = 'asc';
    }
    currentPage = 1;
    loadTableData();
}

// Pagination functionality
function goToPage(page) {
    currentPage = page;
    loadTableData();
}

// Load table data via AJAX
function loadTableData() {
    console.log('loadTableData called with search:', currentSearch, 'page:', currentPage);
    
    if (isLoading) {
        console.log('Already loading, skipping request');
        return;
    }
    
    isLoading = true;
    
    // Build query parameters
    const params = new URLSearchParams({
        page: currentPage,
        search: currentSearch,
        sort: currentSort.column,
        order: currentSort.direction
    });
    
    // Add filters
    Object.keys(currentFilters).forEach(key => {
        if (currentFilters[key]) {
            params.append(key, currentFilters[key]);
        }
    });
    
    // Show loading state
    if (typeof showLoader === 'function') {
        showLoader({
            title: 'Loading...',
            message: 'Fetching data from server',
            delay: 0
        });
    }
    
    // Determine the correct endpoint based on current page
    const currentPath = window.location.pathname;
    let endpoint = '/admin/media/data'; // default
    
    if (currentPath.includes('/users')) {
        endpoint = '/admin/users/data';
    } else if (currentPath.includes('/media')) {
        endpoint = '/admin/media/data';
    }
    
    // Make AJAX request
    fetch(`${endpoint}?${params.toString()}`, {
        method: 'GET',
        credentials: 'same-origin', // Include cookies/session
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data && data.success) {
                updateTableContent(data);
                if (data.pagination) {
                    updatePagination(data.pagination);
                }
                updateURL();
            } else {
                const errorMessage = data && data.message ? data.message : 'Unknown error occurred';
                if (typeof showNotification === 'function') {
                    showNotification('Error loading data: ' + errorMessage, 'error');
                } else {
                    alert('Error loading data: ' + errorMessage);
                }
            }
        })
        .catch(error => {
            console.error('Error:', error);
            if (typeof showNotification === 'function') {
                showNotification('Error loading data', 'error');
            } else {
                alert('Error loading data');
            }
        })
        .finally(() => {
            if (typeof hideLoader === 'function') {
                hideLoader();
            }
            
            // Hide search loading indicator
            const searchLoadingIndicator = document.getElementById('searchLoading');
            if (searchLoadingIndicator) {
                searchLoadingIndicator.classList.add('hidden');
            }
            
            isLoading = false;
        });
}

// Update table content
function updateTableContent(data) {
    const tbody = document.querySelector('#dataTable tbody');
    if (!tbody) return;
    
    if (data.tableRows && typeof data.tableRows === 'string' && data.tableRows.trim() !== '') {
        tbody.innerHTML = data.tableRows;
    } else {
        // Show empty state
        const currentPath = window.location.pathname;
        const isMediaPage = currentPath.includes('/media');
        const emptyIcon = isMediaPage ? 'fas fa-images' : 'fas fa-users';
        const emptyTitle = isMediaPage ? 'No Media Found' : 'No Users Found';
        const emptyMessage = isMediaPage ?
            'No media files have been uploaded yet.' :
            'No users match your current filter criteria.';
        
        tbody.innerHTML = `
            <tr>
                <td colspan="100%" class="px-6 py-4 text-center">
                    <div class="flex flex-col items-center justify-center py-12">
                        <i class="${emptyIcon} text-4xl text-gray-400 mb-4"></i>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">${emptyTitle}</h3>
                        <p class="text-gray-500 text-center max-w-sm">
                            ${currentSearch && currentSearch.length > 0 ? 
                                'No items match your search criteria.' : 
                                emptyMessage}
                        </p>
                    </div>
                </td>
            </tr>
        `;
    }
}

// Update pagination
function updatePagination(pagination) {
    // Update pagination controls if needed
    // For now, we'll just update the URL
    updateURL();
}

// Update URL without page reload
function updateURL() {
    const params = new URLSearchParams({
        page: currentPage,
        search: currentSearch,
        sort: currentSort.column,
        order: currentSort.direction
    });
    
    Object.keys(currentFilters).forEach(key => {
        if (currentFilters[key]) {
            params.append(key, currentFilters[key]);
        }
    });
    
    const newURL = `${window.location.pathname}?${params.toString()}`;
    window.history.pushState({}, '', newURL);
}

// Media management functions
// editMedia function is defined in admin layout

function toggleMediaStatus(mediaId) {
    if (confirm('Are you sure you want to toggle the status of this media?')) {
        fetch(`/admin/media/${mediaId}/toggle`, {
            method: 'PATCH',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Media status updated successfully', 'success');
                loadTableData(); // Reload table
            } else {
                showNotification('Error updating media status: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Error updating media status', 'error');
        });
    }
}

function deleteMedia(mediaId) {
    if (confirm('Are you sure you want to delete this media? This action cannot be undone.')) {
        fetch(`/admin/media/${mediaId}`, {
            method: 'DELETE',
            credentials: 'same-origin',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Media deleted successfully', 'success');
                loadTableData(); // Reload table
            } else {
                showNotification('Error deleting media: ' + data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showNotification('Error deleting media', 'error');
        });
    }
}
</script>
