<!-- Toaster Notification System -->
<div id="toasterContainer" class="fixed top-4 right-4 z-50 space-y-2">
    <!-- Toaster notifications will be dynamically inserted here -->
</div>

<script>
    // Toaster System
    class Toaster {
        constructor() {
            this.container = document.getElementById('toasterContainer');
            this.toasters = [];
        }

        show(message, type = 'info', duration = 5000) {
            const toaster = this.createToaster(message, type, duration);
            this.container.appendChild(toaster);
            this.toasters.push(toaster);

            // Animate in
            setTimeout(() => {
                toaster.classList.add('toaster-show');
            }, 100);

            // Auto remove
            if (duration > 0) {
                setTimeout(() => {
                    this.remove(toaster);
                }, duration);
            }

            return toaster;
        }

        createToaster(message, type, duration) {
            const toaster = document.createElement('div');
            toaster.className = `toaster toaster-${type} transform translate-x-full opacity-0 transition-all duration-300 ease-in-out`;
            
            const icon = this.getIcon(type);
            const colors = this.getColors(type);
            
            toaster.innerHTML = `
                <div class="flex items-center p-4 rounded-lg shadow-lg border-l-4 ${colors.bg} ${colors.border} min-w-80 max-w-96">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 rounded-full ${colors.iconBg} flex items-center justify-center">
                            <i class="${icon} ${colors.iconColor} text-sm"></i>
                        </div>
                    </div>
                    <div class="ml-3 flex-1">
                        <p class="text-sm font-medium ${colors.text}">${message}</p>
                    </div>
                    <div class="ml-4 flex-shrink-0">
                        <button onclick="toaster.remove(this.closest('.toaster'))" class="inline-flex ${colors.text} hover:${colors.textHover} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 rounded-md">
                            <i class="fas fa-times text-xs"></i>
                        </button>
                    </div>
                </div>
            `;

            return toaster;
        }

        getIcon(type) {
            const icons = {
                success: 'fas fa-check',
                error: 'fas fa-times',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };
            return icons[type] || icons.info;
        }

        getColors(type) {
            const colorSchemes = {
                success: {
                    bg: 'bg-green-50',
                    border: 'border-green-400',
                    iconBg: 'bg-green-100',
                    iconColor: 'text-green-600',
                    text: 'text-green-800',
                    textHover: 'text-green-600'
                },
                error: {
                    bg: 'bg-red-50',
                    border: 'border-red-400',
                    iconBg: 'bg-red-100',
                    iconColor: 'text-red-600',
                    text: 'text-red-800',
                    textHover: 'text-red-600'
                },
                warning: {
                    bg: 'bg-yellow-50',
                    border: 'border-yellow-400',
                    iconBg: 'bg-yellow-100',
                    iconColor: 'text-yellow-600',
                    text: 'text-yellow-800',
                    textHover: 'text-yellow-600'
                },
                info: {
                    bg: 'bg-blue-50',
                    border: 'border-blue-400',
                    iconBg: 'bg-blue-100',
                    iconColor: 'text-blue-600',
                    text: 'text-blue-800',
                    textHover: 'text-blue-600'
                }
            };
            return colorSchemes[type] || colorSchemes.info;
        }

        remove(toaster) {
            if (toaster && toaster.parentNode) {
                toaster.classList.remove('toaster-show');
                toaster.classList.add('toaster-hide');
                
                setTimeout(() => {
                    if (toaster.parentNode) {
                        toaster.parentNode.removeChild(toaster);
                    }
                    const index = this.toasters.indexOf(toaster);
                    if (index > -1) {
                        this.toasters.splice(index, 1);
                    }
                }, 300);
            }
        }

        clear() {
            this.toasters.forEach(toaster => {
                this.remove(toaster);
            });
        }
    }

    // Global toaster instance
    const toaster = new Toaster();

    // Global functions for easy access
    function showSuccessToast(message, duration = 5000) {
        return toaster.show(message, 'success', duration);
    }

    function showErrorToast(message, duration = 7000) {
        return toaster.show(message, 'error', duration);
    }

    function showWarningToast(message, duration = 6000) {
        return toaster.show(message, 'warning', duration);
    }

    function showInfoToast(message, duration = 5000) {
        return toaster.show(message, 'info', duration);
    }

    // CSS for toaster animations
    const style = document.createElement('style');
    style.textContent = `
        .toaster-show {
            transform: translateX(0) !important;
            opacity: 1 !important;
        }
        
        .toaster-hide {
            transform: translateX(full) !important;
            opacity: 0 !important;
        }
        
        .toaster {
            margin-bottom: 0.5rem;
        }
        
        .toaster:last-child {
            margin-bottom: 0;
        }
        
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes slideOutRight {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);
</script>
