<%
// Prepare actions
const actions = [];
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'users.view')) {
    actions.push({ name: 'view', label: 'View', icon: 'fas fa-eye', class: 'text-blue-600 hover:text-blue-900', onclick: (item) => `viewUser(${item.id})` });
}
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'users.update')) {
    actions.push({ name: 'edit', label: 'Edit', icon: 'fas fa-edit', class: 'text-indigo-600 hover:text-indigo-900', onclick: (item) => `editUser(${item.id})` });
    actions.push({ name: 'block', label: 'Block', icon: 'fas fa-ban', class: 'text-yellow-600 hover:text-yellow-900', onclick: (item) => `toggleUserStatus(${item.id}, 'block')` });
    actions.push({ name: 'unblock', label: 'Unblock', icon: 'fas fa-check', class: 'text-green-600 hover:text-green-900', onclick: (item) => `toggleUserStatus(${item.id}, 'unblock')` });
}
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'users.delete')) {
    actions.push({ name: 'delete', label: 'Delete', icon: 'fas fa-trash', class: 'text-red-600 hover:text-red-900', onclick: (item) => `deleteUser(${item.id})` });
}

// Prepare columns
const columns = [
    { key: 'serial', label: 'Sr. No.', sortable: false, type: 'custom', formatter: 'formatSerialNumber' },
    { key: 'id', label: 'ID', sortable: true },
    { key: 'name', label: 'Name', sortable: true },
    { key: 'email', label: 'Email', sortable: true },
    { key: 'role_display_name', label: 'Role', sortable: true, type: 'custom', formatter: 'formatRole' },
    { key: 'is_active', label: 'Status', sortable: true, type: 'custom', formatter: 'formatStatus' },
    { key: 'created_at', label: 'Created', sortable: true, type: 'custom', formatter: 'formatDate' }
];
%>

<!-- Include Common Table Component -->
<%- include('../components/table', {
    title: title,
    data: data,
    columns: columns,
    actions: actions,
    pagination: pagination,
    search: search,
    filters: filters,
    roles: roles,
    showSearch: true,
    searchPlaceholder: 'Search users...',
    emptyIcon: 'fas fa-users',
    emptyTitle: 'No Users Found',
    emptyMessage: 'There are no users to display.',
    emptySearchMessage: 'No users match your search criteria.'
}) %>

<!-- Enhanced User View Modal -->
<div id="viewUserModal" class="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full hidden z-40 backdrop-blur-sm">
    <div class="relative top-20 mx-auto p-0 border-0 max-w-lg w-full mx-4 shadow-2xl rounded-2xl bg-white transform transition-all duration-300 ease-out scale-95 opacity-0" id="viewUserModalContainer">
        <!-- Modal Header with Gradient -->
        <div class="bg-gradient-to-r from-purple-500 to-pink-600 rounded-t-2xl p-6 text-white">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="flex-shrink-0 mr-4">
                        <i class="fas fa-user text-white text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-bold">User Details</h3>
                </div>
                <button onclick="closeViewModal()" class="text-white hover:text-gray-200 transition-colors duration-200 p-2 rounded-full hover:bg-white hover:bg-opacity-20">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6">
            <div id="userDetails">
                <!-- User details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Enhanced User Edit Modal -->
<div id="editUserModal" class="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full hidden z-40 backdrop-blur-sm">
    <div class="relative top-20 mx-auto p-0 border-0 max-w-lg w-full mx-4 shadow-2xl rounded-2xl bg-white transform transition-all duration-300 ease-out scale-95 opacity-0" id="editUserModalContainer">
        <!-- Modal Header with Gradient -->
        <div class="bg-gradient-to-r from-blue-500 to-indigo-600 rounded-t-2xl p-6 text-white">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="flex-shrink-0 mr-4">
                        <i class="fas fa-user-edit text-white text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-bold">Edit User</h3>
                </div>
                <button onclick="closeEditModal()" class="text-white hover:text-gray-200 transition-colors duration-200 p-2 rounded-full hover:bg-white hover:bg-opacity-20">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6">
            <form id="editUserForm" data-ajax="true">
                <input type="hidden" id="editUserId" name="id">
                
                <div class="mb-6">
                    <label for="editUserName" class="block text-sm font-semibold text-gray-700 mb-2">Full Name</label>
                    <input type="text" id="editUserName" name="name" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
                </div>
                
                <div class="mb-6">
                    <label for="editUserEmail" class="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                    <input type="email" id="editUserEmail" name="email" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
                </div>
                
                <div class="mb-6">
                    <label for="editUserRole" class="block text-sm font-semibold text-gray-700 mb-2">User Role</label>
                    <select id="editUserRole" name="role_id" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
                        <option value="">Select a role</option>
                        <% if (typeof roles !== 'undefined' && roles) { %>
                            <% roles.forEach(role => { %>
                                <option value="<%= role.id %>"><%= role.display_name %></option>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
                
                <div class="mb-8">
                    <label class="flex items-center">
                        <input type="checkbox" id="editUserActive" name="is_active" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <span class="ml-2 text-sm font-semibold text-gray-700">Active Account</span>
                    </label>
                </div>
                
                <!-- Modal Actions -->
                <div class="flex justify-end space-x-4">
                    <button type="button" onclick="closeEditModal()" class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all duration-200 font-medium">
                        Cancel
                    </button>
                    <button type="submit" class="px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-xl hover:from-blue-600 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:scale-105">
                        <i class="fas fa-save mr-2"></i>
                        Update User
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Formatter functions for custom columns
function formatSerialNumber(item) {
    // Return placeholder - will be updated by updateSerialNumbers function
    return `<span class="text-sm font-medium text-gray-900 serial-number">1</span>`;
}

// Function to update all serial numbers after table loads
function updateSerialNumbers() {
    const serialElements = document.querySelectorAll('.serial-number');
    serialElements.forEach((element, index) => {
        element.textContent = index + 1;
    });
}

function formatRole(roleDisplayName) {
    if (!roleDisplayName || roleDisplayName === 'null') {
        return `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-800">
            <div class="w-2 h-2 rounded-full mr-2 bg-current opacity-75"></div>
            No Role
        </span>`;
    }
    return `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-800">
        <div class="w-2 h-2 rounded-full mr-2 bg-current opacity-75"></div>
        ${roleDisplayName}
    </span>`;
}

function formatStatus(isActive) {
    if (isActive === 1 || isActive === true) {
        return `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-green-100 text-green-800">
            <div class="w-2 h-2 rounded-full mr-2 bg-current opacity-75"></div>
            Active
        </span>`;
    } else {
        return `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-red-100 text-red-800">
            <div class="w-2 h-2 rounded-full mr-2 bg-current opacity-75"></div>
            Inactive
        </span>`;
    }
}

function formatDate(dateString) {
    if (!dateString) return '-';
    const date = new Date(dateString);
    return `<div class="flex items-center space-x-2">
        <i class="fas fa-calendar text-gray-400 text-xs"></i>
        <span class="text-sm text-gray-900">${date.toLocaleDateString()}</span>
    </div>`;
}

// User action functions
function viewUser(userId) {
    // Fetch user details and show modal
    fetch(`/admin/users/${userId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const user = data.user;
                document.getElementById('userDetails').innerHTML = `
                    <div class="space-y-4">
                        <div class="flex items-center space-x-4">
                            <div class="flex-shrink-0 h-16 w-16">
                                <div class="h-16 w-16 rounded-full bg-gradient-to-r from-indigo-500 to-purple-600 flex items-center justify-center">
                                    <span class="text-xl font-medium text-white">${user.name.charAt(0).toUpperCase()}</span>
                                </div>
                            </div>
                            <div>
                                <h4 class="text-lg font-semibold text-gray-900">${user.name}</h4>
                                <p class="text-sm text-gray-500">${user.email}</p>
                            </div>
                        </div>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Role</label>
                                <p class="mt-1 text-sm text-gray-900">${user.role_display_name || 'No role assigned'}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Status</label>
                                <p class="mt-1 text-sm text-gray-900">${user.is_active ? 'Active' : 'Inactive'}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Created</label>
                                <p class="mt-1 text-sm text-gray-900">${new Date(user.created_at).toLocaleDateString()}</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Last Updated</label>
                                <p class="mt-1 text-sm text-gray-900">${new Date(user.updated_at).toLocaleDateString()}</p>
                            </div>
                        </div>
                    </div>
                `;
                document.getElementById('viewUserModal').classList.remove('hidden');
            } else {
                showErrorToast('Error loading user details');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error loading user details');
        });
}

function editUser(userId) {
    // Fetch user details and show edit modal
    fetch(`/admin/users/${userId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const user = data.user;
                document.getElementById('editUserId').value = user.id;
                document.getElementById('editUserName').value = user.name;
                document.getElementById('editUserEmail').value = user.email;
                document.getElementById('editUserRole').value = user.role_id || '';
                document.getElementById('editUserActive').checked = user.is_active;
                document.getElementById('editUserModal').classList.remove('hidden');
            } else {
                showErrorToast('Error loading user details');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error loading user details');
        });
}

function toggleUserStatus(userId, action) {
    const actionText = action === 'block' ? 'block' : 'unblock';
    if (confirm(`Are you sure you want to ${actionText} this user?`)) {
        fetch(`/admin/users/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                is_blocked: action === 'block' ? 1 : 0
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessToast(`User ${actionText}ed successfully`);
                // Refresh the table
                if (typeof refreshTable === 'function') {
                    refreshTable();
                } else {
                    location.reload();
                }
            } else {
                showErrorToast('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error updating user status');
        });
    }
}

function deleteUser(userId) {
    if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
        fetch(`/admin/users/${userId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessToast('User deleted successfully');
                // Refresh the table
                if (typeof refreshTable === 'function') {
                    refreshTable();
                } else {
                    location.reload();
                }
            } else {
                showErrorToast('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error deleting user');
        });
    }
}

// Modal functions
function closeViewModal() {
    document.getElementById('viewUserModal').classList.add('hidden');
}

function closeEditModal() {
    document.getElementById('editUserModal').classList.add('hidden');
}

// Form submission
document.addEventListener('DOMContentLoaded', function() {
    const editForm = document.getElementById('editUserForm');
    if (editForm) {
        editForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(editForm);
            const userId = formData.get('id');
            
            fetch(`/admin/users/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: formData.get('name'),
                    email: formData.get('email'),
                    role_id: formData.get('role_id'),
                    is_active: formData.get('is_active') === 'on' ? 1 : 0
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSuccessToast('User updated successfully');
                    closeEditModal();
                    // Refresh the table
                    if (typeof refreshTable === 'function') {
                        refreshTable();
                    } else {
                        location.reload();
                    }
                } else {
                    showErrorToast('Error: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showErrorToast('Error updating user');
            });
        });
    }
});

// Toast notification functions
function showSuccessToast(message) {
    // Simple toast implementation
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

function showErrorToast(message) {
    // Simple toast implementation
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// Update serial numbers after page loads
document.addEventListener('DOMContentLoaded', function() {
    updateSerialNumbers();
});

// Also update when table is refreshed (for AJAX updates)
if (typeof refreshTable === 'function') {
    const originalRefreshTable = refreshTable;
    refreshTable = function() {
        originalRefreshTable();
        setTimeout(updateSerialNumbers, 100);
    };
}
</script>
