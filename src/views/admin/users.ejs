<%
// Prepare actions
const actions = [];
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'users.view')) {
    actions.push({ name: 'view', label: 'View', icon: 'fas fa-eye', class: 'text-blue-600 hover:text-blue-900', title: 'View User Details', onclick: (item) => `viewUser(${item.id})` });
}
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'users.update')) {
    actions.push({ name: 'edit', label: 'Edit', icon: 'fas fa-edit', class: 'text-indigo-600 hover:text-indigo-900', title: 'Edit User', onclick: (item) => `editUser(${item.id})` });
    actions.push({ name: 'block', label: 'Block', icon: 'fas fa-ban', class: 'text-yellow-600 hover:text-yellow-900', title: 'Block User', onclick: (item) => `toggleUserStatus(${item.id}, 'block')` });
    actions.push({ name: 'unblock', label: 'Unblock', icon: 'fas fa-check', class: 'text-green-600 hover:text-green-900', title: 'Unblock User', onclick: (item) => `toggleUserStatus(${item.id}, 'unblock')` });
}
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'users.delete')) {
    actions.push({ name: 'delete', label: 'Delete', icon: 'fas fa-trash', class: 'text-red-600 hover:text-red-900', title: 'Delete User', onclick: (item) => `deleteUser(${item.id})` });
}

// Prepare columns
const columns = [
    { key: 'name', label: 'Name', sortable: true, type: 'custom', formatter: 'formatUserName' },
    { key: 'email', label: 'Email', sortable: true, type: 'custom', formatter: 'formatUserEmail' },
    { key: 'role_display_name', label: 'Role', sortable: true, type: 'custom', formatter: 'formatUserRole' },
    { key: 'is_active', label: 'Status', sortable: true, type: 'custom', formatter: 'formatUserStatus' },
    { key: 'created_at', label: 'Created', sortable: true, type: 'custom', formatter: 'formatUserDate' }
];
%>

<!-- Include Common Table Component -->
<%- include('../components/table', {
    title: title,
    data: data,
    columns: columns,
    actions: actions,
    pagination: pagination,
    search: search,
    filters: filters,
    roles: roles,
    showSearch: true,
    searchPlaceholder: 'Search users...',
    emptyIcon: 'fas fa-users',
    emptyTitle: 'No Users Found',
    emptyMessage: 'There are no users to display.',
    emptySearchMessage: 'No users match your search criteria.'
}) %>

<!-- Pass user permissions to JavaScript -->
<script>
    window.userPermissions = <%- JSON.stringify(userPermissions || []) %>;
    console.log('User permissions loaded:', window.userPermissions);
    console.log('Has users.view permission:', window.userPermissions && window.userPermissions.some(p => p.name === 'users.view'));
</script>

<!-- Enhanced User View Modal -->
<div id="viewUserModal" class="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full hidden z-40 modal-backdrop">
    <div class="relative top-20 mx-auto p-0 border-0 max-w-2xl w-full mx-4 modal-container rounded-2xl bg-white transform transition-all duration-300 ease-out scale-95 opacity-0" id="viewUserModalContainer">
        <!-- Modal Header with Gradient -->
        <div class="modal-header-gradient rounded-t-2xl p-6 text-white" style="background: linear-gradient(135deg, #8b5cf6 0%, #ec4899 100%);">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="flex-shrink-0 mr-4">
                        <i class="fas fa-user text-white text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-bold">User Details</h3>
                </div>
                <button onclick="closeViewModal()" class="text-white hover:text-gray-200 transition-colors duration-200 p-2 rounded-full hover:bg-white hover:bg-opacity-20">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-8">
            <div id="userDetails">
                <!-- User details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Enhanced User Edit Modal -->
<div id="editUserModal" class="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full hidden z-40 modal-backdrop">
    <div class="relative top-20 mx-auto p-0 border-0 max-w-2xl w-full mx-4 modal-container rounded-2xl bg-white transform transition-all duration-300 ease-out scale-95 opacity-0" id="editUserModalContainer">
        <!-- Modal Header with Gradient -->
        <div class="modal-header-gradient rounded-t-2xl p-6 text-white" style="background: linear-gradient(135deg, #3b82f6 0%, #6366f1 100%);">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="flex-shrink-0 mr-4">
                        <i class="fas fa-user-edit text-white text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-bold">Edit User</h3>
                </div>
                <button onclick="closeEditModal()" class="text-white hover:text-gray-200 transition-colors duration-200 p-2 rounded-full hover:bg-white hover:bg-opacity-20">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-8">
            <form id="editUserForm" data-ajax="true">
                <input type="hidden" id="editUserId" name="id">
                
                <div class="mb-6">
                    <label for="editUserName" class="block text-sm font-semibold text-gray-700 mb-2">Full Name</label>
                    <input type="text" id="editUserName" name="name" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
                </div>
                
                <div class="mb-6">
                    <label for="editUserEmail" class="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                    <input type="email" id="editUserEmail" name="email" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
                </div>
                
                <div class="mb-6">
                    <label for="editUserRole" class="block text-sm font-semibold text-gray-700 mb-2">User Role</label>
                    <select id="editUserRole" name="role_id" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
                        <option value="">Select a role</option>
                        <% if (typeof roles !== 'undefined' && roles) { %>
                            <% roles.forEach(role => { %>
                                <option value="<%= role.id %>"><%= role.display_name %></option>
                            <% }); %>
                        <% } %>
                    </select>
                </div>
                
                <div class="mb-8">
                    <label class="flex items-center">
                        <input type="checkbox" id="editUserActive" name="is_active" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                        <span class="ml-2 text-sm font-semibold text-gray-700">Active Account</span>
                    </label>
                </div>
                
                <!-- Modal Actions -->
                <div class="flex justify-end space-x-4">
                    <button type="button" onclick="closeEditModal()" class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all duration-200 font-medium">
                        Cancel
                    </button>
                    <button type="submit" class="px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-xl hover:from-blue-600 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-300 transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:scale-105">
                        <i class="fas fa-save mr-2"></i>
                        Update User
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Enhanced formatter functions for custom columns

function formatUserName(item) {
    const name = typeof item === 'object' ? item.name : item;
    const email = typeof item === 'object' ? item.email : '';
    
    if (!name) return '<span class="text-gray-400 italic">No name</span>';
    
    // Get user initials
    const initials = name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
    
    return `
        <div class="flex items-center space-x-3">
            <div class="flex-shrink-0">
                <div class="w-10 h-10 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-lg flex items-center justify-center">
                    <span class="text-white font-semibold text-sm">${initials}</span>
                </div>
            </div>
            <div class="flex-1 min-w-0">
                <p class="text-sm font-semibold text-gray-900 truncate">${name}</p>
                <p class="text-xs text-gray-500 truncate">${email}</p>
            </div>
        </div>
    `;
}

function formatUserEmail(item) {
    const email = typeof item === 'object' ? item.email : item;
    if (!email) return '<span class="text-gray-400 italic">No email</span>';
    
    return `
        <div class="max-w-xs">
            <p class="text-sm text-gray-700 bg-gray-50 px-2 py-1 rounded font-mono">${email}</p>
        </div>
    `;
}

function formatUserRole(item) {
    const roleDisplayName = typeof item === 'object' ? item.role_display_name : item;
    const roleKey = typeof item === 'object' ? item.role : '';
    
    if (!roleDisplayName || roleDisplayName === 'null') {
        return `
            <div class="flex items-center space-x-2">
                <div class="w-8 h-8 bg-gray-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-user-slash text-gray-600 text-xs"></i>
                </div>
                <span class="text-sm font-medium text-gray-700">No Role</span>
            </div>
        `;
    }
    
    // Get appropriate icon based on role
    let iconClass = 'fas fa-user';
    let iconColor = 'text-blue-600';
    let bgColor = 'bg-blue-100';
    
    if (roleKey) {
        switch (roleKey.toLowerCase()) {
            case 'admin':
            case 'administrator':
            case 'super administrator':
                iconClass = 'fas fa-crown';
                iconColor = 'text-purple-600';
                bgColor = 'bg-purple-100';
                break;
            case 'moderator':
                iconClass = 'fas fa-shield-alt';
                iconColor = 'text-orange-600';
                bgColor = 'bg-orange-100';
                break;
            case 'editor':
            case 'content editor':
                iconClass = 'fas fa-edit';
                iconColor = 'text-green-600';
                bgColor = 'bg-green-100';
                break;
            case 'viewer':
                iconClass = 'fas fa-eye';
                iconColor = 'text-indigo-600';
                bgColor = 'bg-indigo-100';
                break;
            case 'user':
            case 'regular user':
                iconClass = 'fas fa-user';
                iconColor = 'text-gray-600';
                bgColor = 'bg-gray-100';
                break;
            default:
                iconClass = 'fas fa-user-tag';
                iconColor = 'text-blue-600';
                bgColor = 'bg-blue-100';
        }
    }
    
    return `
        <div class="flex items-center space-x-2">
            <div class="w-8 h-8 ${bgColor} rounded-lg flex items-center justify-center">
                <i class="${iconClass} ${iconColor} text-xs"></i>
            </div>
            <span class="text-sm font-medium text-gray-700">${roleDisplayName}</span>
        </div>
    `;
}

function formatUserStatus(item) {
    const isActive = typeof item === 'object' ? item.is_active : item;
    const isBlocked = typeof item === 'object' ? item.is_blocked : false;
    
    if (isBlocked) {
        return `
            <div class="flex items-center space-x-2">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold bg-red-100 text-red-800">
                    <i class="fas fa-ban mr-1"></i>
                    Blocked
                </span>
            </div>
        `;
    } else if (isActive === 1 || isActive === true) {
        return `
            <div class="flex items-center space-x-2">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold bg-green-100 text-green-800">
                    <i class="fas fa-check-circle mr-1"></i>
                    Active
                </span>
            </div>
        `;
    } else {
        return `
            <div class="flex items-center space-x-2">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-800">
                    <i class="fas fa-pause-circle mr-1"></i>
                    Inactive
                </span>
            </div>
        `;
    }
}

function formatUserDate(item) {
    const dateString = typeof item === 'object' ? item.created_at : item;
    if (!dateString) return '<span class="text-gray-400 italic">N/A</span>';
    
    const date = new Date(dateString);
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    const formattedDate = `${day}/${month}/${year}`;
    
    return `
        <div class="flex items-center space-x-2">
            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                <i class="fas fa-calendar text-blue-600 text-xs"></i>
            </div>
            <span class="text-sm font-medium text-gray-700">${formattedDate}</span>
        </div>
    `;
}

// User action functions
function viewUser(userId) {
    // Fetch user details and show modal
    fetch(`/admin/users/${userId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const user = data.user;
                // Get user initials
                const initials = user.name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
                
                document.getElementById('userDetails').innerHTML = `
                    <div class="space-y-6">
                        <!-- User Avatar and Title -->
                        <div class="flex items-center justify-center">
                            <div class="h-20 w-20 rounded-full module-icon-container flex items-center justify-center" style="background: linear-gradient(135deg, #8b5cf6 0%, #ec4899 100%); box-shadow: 0 10px 25px -5px rgba(139, 92, 246, 0.3);">
                                <span class="text-white font-bold text-2xl">${initials}</span>
                            </div>
                        </div>
                        
                        <div class="text-center">
                            <h4 class="text-2xl font-bold text-gray-900 mb-2">${user.name}</h4>
                            <p class="text-sm text-gray-500 font-mono bg-gray-100 px-3 py-1 rounded-full inline-block">${user.email}</p>
                        </div>
                        
                        <!-- User Details Grid -->
                        <div class="grid grid-cols-2 gap-4">
                            <div class="detail-card rounded-xl p-4" style="background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border: 1px solid #e2e8f0; transition: all 0.3s ease;">
                                <label class="block text-sm font-semibold text-gray-600 mb-2">Role</label>
                                <p class="text-lg font-bold text-gray-900">${user.role_display_name || 'No role assigned'}</p>
                            </div>
                            <div class="detail-card rounded-xl p-4" style="background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border: 1px solid #e2e8f0; transition: all 0.3s ease;">
                                <label class="block text-sm font-semibold text-gray-600 mb-2">Status</label>
                                <p class="text-lg font-bold ${user.is_active ? 'text-green-600' : 'text-red-600'}">${user.is_active ? 'Active' : 'Inactive'}</p>
                            </div>
                            <div class="detail-card rounded-xl p-4" style="background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border: 1px solid #e2e8f0; transition: all 0.3s ease;">
                                <label class="block text-sm font-semibold text-gray-600 mb-2">Created</label>
                                <p class="text-lg font-bold text-gray-900">${new Date(user.created_at).toLocaleDateString()}</p>
                            </div>
                            <div class="detail-card rounded-xl p-4" style="background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%); border: 1px solid #e2e8f0; transition: all 0.3s ease;">
                                <label class="block text-sm font-semibold text-gray-600 mb-2">Last Updated</label>
                                <p class="text-lg font-bold text-gray-900">${new Date(user.updated_at).toLocaleDateString()}</p>
                            </div>
                        </div>
                    </div>
                `;
                document.getElementById('viewUserModal').classList.remove('hidden');
            } else {
                showErrorToast('Error loading user details');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error loading user details');
        });
}

function editUser(userId) {
    // Fetch user details and show edit modal
    fetch(`/admin/users/${userId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const user = data.user;
                document.getElementById('editUserId').value = user.id;
                document.getElementById('editUserName').value = user.name;
                document.getElementById('editUserEmail').value = user.email;
                document.getElementById('editUserRole').value = user.role_id || '';
                document.getElementById('editUserActive').checked = user.is_active;
                document.getElementById('editUserModal').classList.remove('hidden');
            } else {
                showErrorToast('Error loading user details');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error loading user details');
        });
}

function toggleUserStatus(userId, action) {
    const actionText = action === 'block' ? 'block' : 'unblock';
    if (confirm(`Are you sure you want to ${actionText} this user?`)) {
        fetch(`/admin/users/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                is_blocked: action === 'block' ? 1 : 0
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessToast(`User ${actionText}ed successfully`);
                // Refresh the table
                if (typeof refreshTable === 'function') {
                    refreshTable();
                } else {
                    location.reload();
                }
            } else {
                showErrorToast('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error updating user status');
        });
    }
}

function deleteUser(userId) {
    if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
        fetch(`/admin/users/${userId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showSuccessToast('User deleted successfully');
                // Refresh the table
                if (typeof refreshTable === 'function') {
                    refreshTable();
                } else {
                    location.reload();
                }
            } else {
                showErrorToast('Error: ' + (data.message || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showErrorToast('Error deleting user');
        });
    }
}

// Modal functions
function closeViewModal() {
    document.getElementById('viewUserModal').classList.add('hidden');
}

function closeEditModal() {
    document.getElementById('editUserModal').classList.add('hidden');
}

// Form submission
document.addEventListener('DOMContentLoaded', function() {
    const editForm = document.getElementById('editUserForm');
    if (editForm) {
        editForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(editForm);
            const userId = formData.get('id');
            
            fetch(`/admin/users/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: formData.get('name'),
                    email: formData.get('email'),
                    role_id: formData.get('role_id'),
                    is_active: formData.get('is_active') === 'on' ? 1 : 0
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showSuccessToast('User updated successfully');
                    closeEditModal();
                    // Refresh the table
                    if (typeof refreshTable === 'function') {
                        refreshTable();
                    } else {
                        location.reload();
                    }
                } else {
                    showErrorToast('Error: ' + (data.message || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showErrorToast('Error updating user');
            });
        });
    }
});

// Toast notification functions
function showSuccessToast(message) {
    // Simple toast implementation
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

function showErrorToast(message) {
    // Simple toast implementation
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// Make sure all formatters are available globally
window.formatUserName = formatUserName;
window.formatUserEmail = formatUserEmail;
window.formatUserRole = formatUserRole;
window.formatUserStatus = formatUserStatus;
window.formatUserDate = formatUserDate;

</script>
