<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Security Dashboard - ArchivArt</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-50">
    <div class="min-h-screen">
        <!-- Header -->
        <div class="bg-white shadow-sm border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-6">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900">Security Dashboard</h1>
                        <p class="mt-1 text-sm text-gray-500">Monitor security events and system health</p>
                    </div>
                    <div class="flex space-x-3">
                        <button onclick="refreshData()" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <i class="fas fa-sync-alt mr-2"></i>
                            Refresh
                        </button>
                        <button onclick="exportSecurityReport()" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                            <i class="fas fa-download mr-2"></i>
                            Export Report
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <!-- Security Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-shield-alt text-red-500 text-2xl"></i>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Failed Logins (24h)</dt>
                                    <dd class="text-lg font-medium text-gray-900" id="failed-logins-count">-</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-exclamation-triangle text-yellow-500 text-2xl"></i>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Security Events (24h)</dt>
                                    <dd class="text-lg font-medium text-gray-900" id="security-events-count">-</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-ban text-red-600 text-2xl"></i>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Blocked IPs</dt>
                                    <dd class="text-lg font-medium text-gray-900" id="blocked-ips-count">-</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow rounded-lg">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <i class="fas fa-users text-green-500 text-2xl"></i>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Active Sessions</dt>
                                    <dd class="text-lg font-medium text-gray-900" id="active-sessions-count">-</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts Row -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
                <!-- Security Events Chart -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Security Events (Last 7 Days)</h3>
                    <canvas id="securityEventsChart" width="400" height="200"></canvas>
                </div>

                <!-- Failed Logins Chart -->
                <div class="bg-white shadow rounded-lg p-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Failed Login Attempts (Last 7 Days)</h3>
                    <canvas id="failedLoginsChart" width="400" height="200"></canvas>
                </div>
            </div>

            <!-- Recent Security Events -->
            <div class="bg-white shadow rounded-lg">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Recent Security Events</h3>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Event</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Severity</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                            </tr>
                        </thead>
                        <tbody id="security-events-table" class="bg-white divide-y divide-gray-200">
                            <!-- Events will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Blocked IPs Section -->
            <div class="mt-8 bg-white shadow rounded-lg">
                <div class="px-6 py-4 border-b border-gray-200">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-medium text-gray-900">Blocked IP Addresses</h3>
                        <button onclick="showUnblockModal()" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            <i class="fas fa-unlock mr-2"></i>
                            Manage Blocks
                        </button>
                    </div>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Attempts</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Attempt</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Blocked Until</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="blocked-ips-table" class="bg-white divide-y divide-gray-200">
                            <!-- Blocked IPs will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Unblock IP Modal -->
    <div id="unblock-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Unblock IP Address</h3>
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">IP Address</label>
                    <input type="text" id="unblock-ip" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="192.168.1.1">
                </div>
                <div class="flex justify-end space-x-3">
                    <button onclick="hideUnblockModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400">
                        Cancel
                    </button>
                    <button onclick="unblockIP()" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700">
                        Unblock
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let securityEventsChart, failedLoginsChart;

        // Initialize charts
        function initCharts() {
            // Security Events Chart
            const securityCtx = document.getElementById('securityEventsChart').getContext('2d');
            securityEventsChart = new Chart(securityCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Security Events',
                        data: [],
                        borderColor: 'rgb(239, 68, 68)',
                        backgroundColor: 'rgba(239, 68, 68, 0.1)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            // Failed Logins Chart
            const failedCtx = document.getElementById('failedLoginsChart').getContext('2d');
            failedLoginsChart = new Chart(failedCtx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Failed Logins',
                        data: [],
                        backgroundColor: 'rgba(245, 158, 11, 0.8)',
                        borderColor: 'rgb(245, 158, 11)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        // Load security data
        async function loadSecurityData() {
            try {
                const response = await fetch('/admin/api/security/stats');
                const data = await response.json();
                
                // Update stats cards
                document.getElementById('failed-logins-count').textContent = data.failedLogins24h || 0;
                document.getElementById('security-events-count').textContent = data.securityEvents24h || 0;
                document.getElementById('blocked-ips-count').textContent = data.blockedIPs || 0;
                document.getElementById('active-sessions-count').textContent = data.activeSessions || 0;

                // Update charts
                if (data.chartData) {
                    securityEventsChart.data.labels = data.chartData.dates;
                    securityEventsChart.data.datasets[0].data = data.chartData.securityEvents;
                    securityEventsChart.update();

                    failedLoginsChart.data.labels = data.chartData.dates;
                    failedLoginsChart.data.datasets[0].data = data.chartData.failedLogins;
                    failedLoginsChart.update();
                }

                // Load recent events
                loadRecentEvents();
                loadBlockedIPs();
            } catch (error) {
                console.error('Error loading security data:', error);
            }
        }

        // Load recent security events
        async function loadRecentEvents() {
            try {
                const response = await fetch('/admin/api/security/events');
                const events = await response.json();
                
                const tbody = document.getElementById('security-events-table');
                tbody.innerHTML = '';

                events.forEach(event => {
                    const row = document.createElement('tr');
                    const severityColor = {
                        'low': 'text-green-600 bg-green-100',
                        'medium': 'text-yellow-600 bg-yellow-100',
                        'high': 'text-orange-600 bg-orange-100',
                        'critical': 'text-red-600 bg-red-100'
                    }[event.severity] || 'text-gray-600 bg-gray-100';

                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${event.event_type}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${event.user_name || 'N/A'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${event.ip_address || 'N/A'}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${severityColor}">
                                ${event.severity}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(event.created_at).toLocaleString()}</td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading recent events:', error);
            }
        }

        // Load blocked IPs
        async function loadBlockedIPs() {
            try {
                const response = await fetch('/admin/api/security/blocked-ips');
                const blockedIPs = await response.json();
                
                const tbody = document.getElementById('blocked-ips-table');
                tbody.innerHTML = '';

                blockedIPs.forEach(ip => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${ip.ip_address}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${ip.email || 'N/A'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${ip.attempt_count}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(ip.last_attempt).toLocaleString()}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(ip.blocked_until).toLocaleString()}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="unblockIPAddress('${ip.ip_address}')" class="text-red-600 hover:text-red-900">
                                <i class="fas fa-unlock"></i> Unblock
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading blocked IPs:', error);
            }
        }

        // Unblock IP address
        async function unblockIPAddress(ip) {
            if (!confirm(`Are you sure you want to unblock IP address ${ip}?`)) {
                return;
            }

            try {
                const response = await fetch(`/admin/api/security/unblock-ip`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ ip })
                });

                if (response.ok) {
                    alert('IP address unblocked successfully');
                    loadBlockedIPs();
                    loadSecurityData();
                } else {
                    alert('Failed to unblock IP address');
                }
            } catch (error) {
                console.error('Error unblocking IP:', error);
                alert('Error unblocking IP address');
            }
        }

        // Show unblock modal
        function showUnblockModal() {
            document.getElementById('unblock-modal').classList.remove('hidden');
        }

        // Hide unblock modal
        function hideUnblockModal() {
            document.getElementById('unblock-modal').classList.add('hidden');
        }

        // Unblock IP from modal
        async function unblockIP() {
            const ip = document.getElementById('unblock-ip').value;
            if (!ip) {
                alert('Please enter an IP address');
                return;
            }

            await unblockIPAddress(ip);
            hideUnblockModal();
            document.getElementById('unblock-ip').value = '';
        }

        // Refresh data
        function refreshData() {
            loadSecurityData();
        }

        // Export security report
        async function exportSecurityReport() {
            try {
                const response = await fetch('/admin/api/security/export-report');
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `security-report-${new Date().toISOString().split('T')[0]}.pdf`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            } catch (error) {
                console.error('Error exporting report:', error);
                alert('Error exporting security report');
            }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initCharts();
            loadSecurityData();
            
            // Refresh data every 30 seconds
            setInterval(loadSecurityData, 30000);
        });
    </script>
</body>
</html>
