<%
// Debug: Log the data being passed to the view
console.log('Media view data:', {
    dataCount: typeof data !== 'undefined' ? data.length : 0,
    data: data,
    pagination: pagination,
    dataType: typeof data,
    isArray: Array.isArray(data),
    firstItem: typeof data !== 'undefined' && data.length > 0 ? data[0] : null
});
%>

<!-- Formatter functions are now loaded from media-management.js -->

<%
// Prepare header buttons
const headerButtons = [];
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'media.create')) {
    headerButtons.push({
        text: 'Upload Media',
        href: '/admin/media/upload',
        icon: 'fas fa-cloud-upload-alt',
        class: 'inline-flex items-center px-6 py-3 border border-transparent text-sm font-semibold rounded-xl text-white bg-gradient-to-r from-emerald-500 to-green-600 hover:from-emerald-600 hover:to-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transform hover:scale-105 transition-all duration-200 shadow-lg hover:shadow-xl'
    });
}

// Prepare columns (removed description column)
const columns = [
    { key: 'title', label: 'Title', sortable: true, type: 'custom', formatter: 'formatMediaTitle' },
    { key: 'scanning_image', label: 'Scanning Image', sortable: true, type: 'custom', formatter: 'formatScanningImage' },
    { key: 'media_type', label: 'Media Type', sortable: true, type: 'custom', formatter: 'formatMediaType' },
    { key: 'file_size', label: 'File Size', sortable: true, type: 'custom', formatter: 'formatFileSize' },
    { key: 'is_active', label: 'Status', sortable: true, type: 'custom', formatter: 'formatMediaStatus' },
    { key: 'created_at', label: 'Created', sortable: true, type: 'custom', formatter: 'formatMediaDate' },
    { key: 'uploaded_by_name', label: 'Uploaded By', sortable: true, type: 'custom', formatter: 'formatUploadedBy' }
];

// Prepare actions
const actions = [];
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'media.view')) {
    actions.push({
        icon: (item) => 'fas fa-eye',
        title: (item) => 'View',
        class: 'text-indigo-600 hover:text-indigo-900',
        onclick: (item) => `window.location.href='/admin/media/view/${item.id}'`
    });
}
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'media.manage')) {
    actions.push({
        icon: (item) => 'fas fa-edit',
        title: (item) => 'Edit',
        class: 'text-blue-600 hover:text-blue-900',
        onclick: (item) => `window.location.href='/admin/media/edit/${item.id}'`
    });
    actions.push({
        icon: (item) => item.is_active ? 'fas fa-pause' : 'fas fa-play',
        title: (item) => item.is_active ? 'Deactivate' : 'Activate',
        class: (item) => `text-${item.is_active ? 'yellow' : 'green'}-600 hover:text-${item.is_active ? 'yellow' : 'green'}-900`,
        onclick: (item) => `toggleMediaStatus(${item.id})`
    });
}
if (typeof userPermissions !== 'undefined' && userPermissions.some(p => p.name === 'media.manage')) {
    actions.push({
        icon: (item) => 'fas fa-trash',
        title: (item) => 'Delete',
        class: 'text-red-600 hover:text-red-900',
        onclick: (item) => `deleteMedia(${item.id})`
    });
}

// Prepare filters
const tableFilters = [
    {
        key: 'media_type',
        label: 'Media Type',
        options: [
            { value: '', label: 'All Types' },
            { value: 'image', label: 'Image' },
            { value: 'video', label: 'Video' },
            { value: 'audio', label: 'Audio' }
        ],
        current: filters.media_type
    },
    {
        key: 'is_active',
        label: 'Status',
        options: [
            { value: '', label: 'All Status' },
            { value: '1', label: 'Active' },
            { value: '0', label: 'Inactive' }
        ],
        current: filters.is_active
    }
];
%>

<!-- Debug data before passing to table component -->
<%
console.log('Data being passed to table component:', {
    title: title,
    dataLength: data ? data.length : 0,
    data: data,
    columnsLength: columns ? columns.length : 0,
    actionsLength: actions ? actions.length : 0,
    pagination: pagination
});
%>

<!-- Debug info removed -->

<!-- Include Common Table Component -->
<%- include('../components/table', {
    title: title,
    data: data, // Changed from 'media' to 'data' to match user controller pattern
    headerButtons: headerButtons,
    columns: columns,
    actions: actions,
    pagination: pagination,
    search: search,
    filters: tableFilters,
    showSearch: true,
    searchPlaceholder: 'Search media by title or description...',
    emptyIcon: 'fas fa-images',
    emptyTitle: 'No Media Found',
    emptyMessage: 'No media files have been uploaded yet.',
    emptySearchMessage: 'No media files match your search criteria.'
}) %>

<!-- Enhanced Media View Modal -->
<div id="viewMediaModal" class="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full hidden z-40 backdrop-blur-sm">
    <div class="relative top-20 mx-auto p-0 border-0 w-11/12 md:w-3/4 lg:w-1/2 shadow-2xl rounded-2xl bg-white transform transition-all duration-300 ease-out scale-95 opacity-0" id="viewMediaModalContainer">
        <!-- Modal Header with Gradient -->
        <div class="bg-gradient-to-r from-emerald-500 to-teal-600 rounded-t-2xl p-6 text-white">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="flex-shrink-0 mr-4">
                        <i class="fas fa-play-circle text-white text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-bold">Media Details</h3>
                </div>
                <button onclick="closeModal('viewMediaModal')" class="text-white hover:text-gray-200 transition-colors duration-200 p-2 rounded-full hover:bg-white hover:bg-opacity-20">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6">
            <div id="mediaDetails" class="space-y-4">
                <!-- Media details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Media Edit Modal removed - now using dedicated edit page -->

<!-- Enhanced Upload Media Modal -->
<div id="uploadMediaModal" class="fixed inset-0 bg-black bg-opacity-60 overflow-y-auto h-full w-full hidden z-40 backdrop-blur-sm">
    <div class="relative top-20 mx-auto p-0 border-0 w-11/12 md:w-3/4 lg:w-1/2 shadow-2xl rounded-2xl bg-white transform transition-all duration-300 ease-out scale-95 opacity-0" id="uploadMediaModalContainer">
        <!-- Modal Header with Gradient -->
        <div class="bg-gradient-to-r from-emerald-500 to-green-600 rounded-t-2xl p-6 text-white">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="flex-shrink-0 mr-4">
                        <i class="fas fa-cloud-upload-alt text-white text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-bold">Upload Media</h3>
                </div>
                <button onclick="closeModal('uploadMediaModal')" class="text-white hover:text-gray-200 transition-colors duration-200 p-2 rounded-full hover:bg-white hover:bg-opacity-20">
                    <i class="fas fa-times text-lg"></i>
                </button>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6">
            <form id="uploadMediaForm" enctype="multipart/form-data" class="space-y-6">
                <div>
                    <label for="uploadTitle" class="block text-sm font-semibold text-gray-700 mb-2">Media Title *</label>
                    <input type="text" id="uploadTitle" name="title" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white" required>
                </div>
                
                <div>
                    <label for="uploadDescription" class="block text-sm font-semibold text-gray-700 mb-2">Description</label>
                    <textarea id="uploadDescription" name="description" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white"></textarea>
                </div>
                
                <div>
                    <label for="uploadMediaType" class="block text-sm font-semibold text-gray-700 mb-2">Media Type *</label>
                    <select id="uploadMediaType" name="media_type" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white" required>
                        <option value="">Select Media Type</option>
                        <option value="image">Image</option>
                        <option value="video">Video</option>
                        <option value="audio">Audio</option>
                    </select>
                </div>
                
                <div>
                    <label for="uploadMediaFile" class="block text-sm font-semibold text-gray-700 mb-2">Media File *</label>
                    <input type="file" id="uploadMediaFile" name="media_file" accept="image/*,video/*,audio/*" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-emerald-50 file:text-emerald-700 hover:file:bg-emerald-100" required>
                    <p class="mt-2 text-sm text-gray-500">Supported formats: Images (JPEG, PNG, GIF, WebP), Videos (MP4, AVI, MOV, WMV), Audio (MP3, WAV, M4A, OGG). Max size: 100MB</p>
                </div>
                
                <div>
                    <label for="uploadScanningImage" class="block text-sm font-semibold text-gray-700 mb-2">Scanning Image *</label>
                    <input type="file" id="uploadScanningImage" name="scanning_image" accept="image/*" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-emerald-50 file:text-emerald-700 hover:file:bg-emerald-100" required>
                    <p class="mt-2 text-sm text-gray-500">This image will be used for AR scanning. Must be unique across all media.</p>
                </div>
                
                <!-- Modal Actions -->
                <div class="flex justify-end space-x-4 pt-4">
                    <button type="button" onclick="closeModal('uploadMediaModal')" class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-all duration-200 font-medium">
                        Cancel
                    </button>
                    <button type="submit" class="px-6 py-3 bg-gradient-to-r from-emerald-500 to-green-600 text-white rounded-xl hover:from-emerald-600 hover:to-green-700 focus:outline-none focus:ring-2 focus:ring-emerald-300 transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:scale-105">
                        <i class="fas fa-cloud-upload-alt mr-2"></i>
                        Upload Media
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Formatters are already defined above and available globally

// Function to apply formatters to existing table rows
function applyFormattersToExistingRows() {
    console.log('Media formatters loaded, applying to existing rows...');
    console.log('Available formatters:', Object.keys(window).filter(key => key.startsWith('formatMedia')));
    
    // Check if there's any data in the table
    const tableBody = document.querySelector('#dataTable tbody');
    const tableRows = tableBody ? tableBody.querySelectorAll('tr') : [];
    console.log('Table body found:', !!tableBody);
    console.log('Number of table rows:', tableRows.length);
    
    if (tableRows.length === 0) {
        console.log('No table rows found - checking if data exists...');
        // Check if there's an empty state message
        const emptyState = document.querySelector('[colspan="100%"]');
        console.log('Empty state found:', !!emptyState);
        if (emptyState) {
            console.log('Empty state text:', emptyState.textContent);
        }
    }
    
    // Apply formatters to any existing table rows
    const formatterElements = document.querySelectorAll('[data-formatter]');
    console.log('Found', formatterElements.length, 'elements with data-formatter attribute');
    
    formatterElements.forEach((element, index) => {
        const formatterName = element.getAttribute('data-formatter');
        const itemData = JSON.parse(element.getAttribute('data-item') || '{}');
        
        console.log(`Element ${index}: formatter=${formatterName}, data=`, itemData);
        
        if (typeof window[formatterName] === 'function') {
            element.innerHTML = window[formatterName](itemData);
        } else {
            console.warn('Formatter function not found:', formatterName);
        }
    });
    
    console.log('Applied formatters to', formatterElements.length, 'elements');
}

// Apply formatters on page load
document.addEventListener('DOMContentLoaded', applyFormattersToExistingRows);

// Also apply immediately if DOM is already loaded
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', applyFormattersToExistingRows);
} else {
    // DOM is already loaded, apply immediately
    setTimeout(applyFormattersToExistingRows, 100);
}
</script>